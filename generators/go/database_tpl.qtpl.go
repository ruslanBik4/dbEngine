// Code generated by qtc from "database_tpl.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line database_tpl.qtpl:1
package _go

//line database_tpl.qtpl:2
import (
	"fmt"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/ruslanBik4/dbEngine/dbEngine"
	"github.com/ruslanBik4/dbEngine/dbEngine/psql"
)

//line database_tpl.qtpl:12
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line database_tpl.qtpl:12
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line database_tpl.qtpl:12
func (c *Creator) StreamCreateDatabase(qw422016 *qt422016.Writer, packages, listRoutines []string) {
//line database_tpl.qtpl:12
	qw422016.N().S(`// Code generated by dbEngine-gen-go. DO NOT EDIT!
// Copyright https://github.com/ruslanBik4

/*
	Package db

DB implements interface for table, view and routines of Database
versions:

 	dbEngine v1.1.6

source: %s %s
*/
package db

import (
`)
//line database_tpl.qtpl:29
	for _, lib := range packages {
//line database_tpl.qtpl:29
		qw422016.N().S(`	"`)
//line database_tpl.qtpl:30
		qw422016.E().S(lib)
//line database_tpl.qtpl:30
		qw422016.N().S(`"
`)
//line database_tpl.qtpl:31
	}
//line database_tpl.qtpl:31
	qw422016.N().S(`)

type scanError interface {
	ScanValue(d any)
	Err() error
}

// ValueDecoder is a value that implements the text and binary encoding and decoding interfaces.
type ValueDecoder[T any] interface {
	pgtype.TextDecoder
	pgtype.BinaryDecoder
	New() T
}

type WrapArray[T ValueDecoder[T]] []T

func (dst *WrapArray[T]) DecodeText(ci *pgtype.ConnInfo, src []byte) (err error) {
	if len(src) == 0 {
		return nil
	}

	arr, err := pgtype.ParseUntypedTextArray(gotools.BytesToString(src))
	if err != nil {
		return err
	}

	if len(arr.Elements) == 0 {
		return nil
	}

	buf := make([]T, len(arr.Elements))
	for i, el := range arr.Elements {
		buf[i] = T.New(buf[i])
		if err := buf[i].DecodeText(ci, gotools.StringToBytes(el)); err != nil {
			return err
		}
	}

	*dst = buf

	return nil
}

func (dst *WrapArray[T]) DecodeBinary(ci *pgtype.ConnInfo, src []byte) (err error) {
	if len(src) == 0 {
		return nil
	}

	arr, err := pgtype.ParseUntypedTextArray(gotools.BytesToString(src))
	if err != nil {
		return err
	}

	if len(arr.Elements) == 0 {
		return nil
	}

	buf := make([]T, len(arr.Elements))
	for i, el := range arr.Elements {
		buf[i] = T.New(buf[i])
		if err := buf[i].DecodeBinary(ci, gotools.StringToBytes(el)); err != nil {
			return err
		}
	}

	*dst = buf

	return nil
}
`)
//line database_tpl.qtpl:101
	hasCitext := false

//line database_tpl.qtpl:101
	qw422016.N().S(`

`)
//line database_tpl.qtpl:103
	for _, name := range c.types {
//line database_tpl.qtpl:104
		if name != "citext" {
//line database_tpl.qtpl:104
			c.StreamCreateTypeInterface(qw422016, c.DB.Types[name], strcase.ToCamel(name), name, c.Types[name])
//line database_tpl.qtpl:104
			qw422016.N().S(`
`)
//line database_tpl.qtpl:105
		} else {
//line database_tpl.qtpl:105
			qw422016.N().S(`
type CitextArray struct {
	pgtype.TextArray
}

func (dst CitextArray) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBufferString("[")
	for i, text := range dst.Elements {
		if i > 0 {
			buf.WriteString(",")
		}

		buf.WriteString(text.String)
	}

	buf.WriteString("]")

	return buf.Bytes(), nil
}

var customTypes = map[string]*pgtype.DataType{
	"citext": {
		Value: &pgtype.Text{},
		Name:  "citext",
	},
	"_citext": {
		Value: &pgtype.TextArray{},
		Name:  "[]string",
	},
}

var initCustomTypes bool

const sqlGetTypes = "SELECT typname, oid FROM pg_type WHERE typname::text=ANY($1)"

func getOidCustomTypes(ctx context.Context, conn *pgx.Conn) error {
	params := make([]string, 0, len(customTypes))
	for name := range customTypes {
		params = append(params, name)
	}

	rows, err := conn.Query(ctx, sqlGetTypes, params)
	if err != nil {
		return err
	}

	for rows.Next() {
		var name string
		var oid uint32
		err = rows.Scan(&name, &oid)
		if err != nil {
			return err
		}
		if c, ok := customTypes[name]; ok && c.Value == (*pgtype.ArrayType)(nil) {
			c.Value = pgtype.NewArrayType(name, oid, func() pgtype.ValueTranscoder {
				return &pgtype.Text{}
			}).NewTypeValue()
			c.OID = oid
			logs.DebugLog(c)
		} else if ok {
			customTypes[name].OID = oid
		}
	}

	if rows.Err() != nil {
		logs.ErrorLog(rows.Err(), " cannot get oid for customTypes")
	}

	return err
}

// afterConnect create need types & register on conn
func afterConnect(ctx context.Context, conn *pgx.Conn) error {
	// Override registered handler for point
	if !initCustomTypes {
		err := getOidCustomTypes(ctx, conn)
		if err != nil {
			return err
		}

		initCustomTypes = true
	}

	mess := "DB registered type (name, oid): "
	for name, val := range customTypes {
		conn.ConnInfo().RegisterDataType(*val)
		mess += fmt.Sprintf("\n(%s,%v, %T) ", name, val.OID, val.Value)
	}

	logs.StatusLog(conn.PgConn().Conn().LocalAddr().String(), mess)

	return nil
}
`)
//line database_tpl.qtpl:198
			hasCitext = true

//line database_tpl.qtpl:198
			qw422016.N().S(`
`)
//line database_tpl.qtpl:199
		}
//line database_tpl.qtpl:199
		qw422016.N().S(`
`)
//line database_tpl.qtpl:200
	}
//line database_tpl.qtpl:200
	qw422016.N().S(`// Database is root interface for operation for %s.%s
type Database struct {
	*dbEngine.DB
	CreateAt time.Time
}

// NewDatabase create new Database with minimal necessary handlers
func NewDatabase(ctx context.Context, noticeHandler pgconn.NoticeHandler, channelHandler pgconn.NotificationHandler, channels ...string) (*Database, error) {
	if noticeHandler == nil {
		noticeHandler = printNotice
	}
	conn := psql.NewConnWithOptions(
`)
//line database_tpl.qtpl:213
	if hasCitext {
//line database_tpl.qtpl:213
		qw422016.N().S(`psql.AfterConnect(afterConnect),`)
//line database_tpl.qtpl:213
	}
//line database_tpl.qtpl:213
	qw422016.N().S(`		psql.NoticeHandler(noticeHandler),
		psql.ChannelHandler(channelHandler),
		psql.Channels(channels...),
	)

	DB, err := dbEngine.NewDB(ctx, conn)
	if err != nil {
		logs.ErrorLog(err, "new DB")
		return nil, err
	}

	return &Database{DB, time.Now()}, nil
}

func (DB *Database) Notify(ctx context.Context, ch, mess string) string {
	res := ""
	err := DB.Conn.SelectOneAndScan(ctx, &res, "SELECT pg_notify($1,$2)::varchar", ch, mess)
	if err != nil {
		logs.ErrorLog(err, "SELECT pg_notify(%s, %s)", ch, mess)
	} else {
		logs.DebugLog("send notify in %s '%s' - %s", res, ch, mess)
	}

	return res
}

// PsqlConn return connection as *psql.Conn
// need for some low-level operation,
// invoke Conn.Select...(custom sql),
//        New{table_name}FromConn, etc.
func (d *Database) PsqlConn() *psql.Conn {
	return (d.Conn).(*psql.Conn)
}
`)
//line database_tpl.qtpl:247
	for name := range c.Tables {
//line database_tpl.qtpl:247
		c.StreamCreateTableConstructor(qw422016, strcase.ToCamel(name), name)
//line database_tpl.qtpl:247
	}
//line database_tpl.qtpl:248
	for _, name := range listRoutines {
//line database_tpl.qtpl:248
		c.StreamCreateRoutinesInvoker(qw422016, c.Routines[name].(*psql.Routine), name)
//line database_tpl.qtpl:248
	}
//line database_tpl.qtpl:248
	qw422016.N().S(`// printNotice logging some psql messages (invoked command 'RAISE ...')
func printNotice(c *pgconn.PgConn, n *pgconn.Notice) {
	switch {
    case n.Code == "42P07" || strings.Contains(n.Message, "skipping"):
		logs.DebugLog("skip operation: %s", n.Message)

	case n.Severity == "INFO":
		logs.StatusLog(n.Message)

	case n.Code > "00000":
		err := (*pgconn.PgError)(n)
		logs.CustomLog(logs.CRITICAL, "DB_EXEC", err.File, int(err.Line),
			fmt.Sprintf("%v, hint: %s, where: %s, %s %s", err, n.Hint, n.Where, err.SQLState(), err.Routine), logs.FgErr)

	case strings.HasPrefix(n.Message, "[[ERROR]]"):
		logs.ErrorLog(errors.New(strings.TrimPrefix(n.Message, "[[ERROR]]") + n.Severity))

	default: // DEBUG
		logs.DebugLog("%+v %s (PID:%d)", n.Severity, n.Message, c.PID())
	}
}
`)
//line database_tpl.qtpl:270
}

//line database_tpl.qtpl:270
func (c *Creator) WriteCreateDatabase(qq422016 qtio422016.Writer, packages, listRoutines []string) {
//line database_tpl.qtpl:270
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:270
	c.StreamCreateDatabase(qw422016, packages, listRoutines)
//line database_tpl.qtpl:270
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:270
}

//line database_tpl.qtpl:270
func (c *Creator) CreateDatabase(packages, listRoutines []string) string {
//line database_tpl.qtpl:270
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:270
	c.WriteCreateDatabase(qb422016, packages, listRoutines)
//line database_tpl.qtpl:270
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:270
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:270
	return qs422016
//line database_tpl.qtpl:270
}

//line database_tpl.qtpl:272
func (c *Creator) StreamCreateTypeInterface(qw422016 *qt422016.Writer, t dbEngine.Types, typeName, name, typeCol string) {
//line database_tpl.qtpl:273
	if len(t.Enumerates) == 0 && len(t.Attr) > 0 && t.Attr[0].Name != "domain" {
//line database_tpl.qtpl:273
		qw422016.N().S(`// `)
//line database_tpl.qtpl:274
		qw422016.E().S(typeName)
//line database_tpl.qtpl:274
		qw422016.N().S(` create new instance of type `)
//line database_tpl.qtpl:274
		qw422016.E().S(name)
//line database_tpl.qtpl:274
		qw422016.N().S(`
type `)
//line database_tpl.qtpl:275
		qw422016.E().S(typeName)
//line database_tpl.qtpl:275
		qw422016.N().S(` struct {
`)
//line database_tpl.qtpl:276
		for _, attr := range t.Attr {
//line database_tpl.qtpl:276
			qw422016.N().S(`	`)
//line database_tpl.qtpl:277
			qw422016.N().S(fmt.Sprintf("%-21s\t\t%s\t", strcase.ToCamel(attr.Name), attr.Type))
//line database_tpl.qtpl:277
			qw422016.N().S(` `)
//line database_tpl.qtpl:277
			qw422016.N().S("`")
//line database_tpl.qtpl:277
			qw422016.N().S(`json:"`)
//line database_tpl.qtpl:277
			qw422016.E().S(attr.Name)
//line database_tpl.qtpl:277
			qw422016.N().S(`"`)
//line database_tpl.qtpl:277
			qw422016.N().S("`")
//line database_tpl.qtpl:277
			qw422016.N().S(`
`)
//line database_tpl.qtpl:278
		}
//line database_tpl.qtpl:279
		if t.Type == 'r' {
//line database_tpl.qtpl:279
			qw422016.N().S(`	LowerType pgtype.BoundType
	UpperType pgtype.BoundType
`)
//line database_tpl.qtpl:282
		}
//line database_tpl.qtpl:282
		qw422016.N().S(`}

// New implement ValueDecoder[T any] interface
func (dst *`)
//line database_tpl.qtpl:286
		qw422016.E().S(typeName)
//line database_tpl.qtpl:286
		qw422016.N().S(`) New() *`)
//line database_tpl.qtpl:286
		qw422016.E().S(typeName)
//line database_tpl.qtpl:286
		qw422016.N().S(`{
	return &`)
//line database_tpl.qtpl:287
		qw422016.E().S(typeName)
//line database_tpl.qtpl:287
		qw422016.N().S(`{}
}

// DecodeText implement pgtype.TextDecoder interface
func (dst *`)
//line database_tpl.qtpl:291
		qw422016.E().S(typeName)
//line database_tpl.qtpl:291
		qw422016.N().S(`) DecodeText(ci *pgtype.ConnInfo, src []byte) error {
	*dst = `)
//line database_tpl.qtpl:292
		qw422016.E().S(typeName)
//line database_tpl.qtpl:292
		qw422016.N().S(`{}
	if len(src) == 0 {
		return nil
	}
	`)
//line database_tpl.qtpl:296
		if t.Type == 'r' {
//line database_tpl.qtpl:296
			qw422016.N().S(`
	utr, err := pgtype.ParseUntypedTextRange(gotools.BytesToString(src))
	if err != nil {
		return err
	}
`)
//line database_tpl.qtpl:301
		} else {
//line database_tpl.qtpl:301
			qw422016.N().S(`	c := pgtype.NewCompositeTextScanner(ci, src)
`)
//line database_tpl.qtpl:303
		}
//line database_tpl.qtpl:303
		qw422016.N().S(`	var scanErrors error
`)
//line database_tpl.qtpl:305
		if t.Type == 'r' {
//line database_tpl.qtpl:305
			qw422016.N().S(`    	dst.LowerType = utr.LowerType
    	dst.UpperType = utr.UpperType

    	if dst.LowerType == pgtype.Empty {
    		return nil
    	}

    	if dst.LowerType == pgtype.Inclusive || dst.LowerType == pgtype.Exclusive {
    		if err := dst.Lower.DecodeText(ci, gotools.StringToBytes(utr.Lower)); err != nil {
    			scanErrors = errors.Join(scanErrors, err)
    		}
    	}

    	if dst.UpperType == pgtype.Inclusive || dst.UpperType == pgtype.Exclusive {
    		if err := dst.Upper.DecodeText(ci, gotools.StringToBytes(utr.Upper)); err != nil {
    			scanErrors = errors.Join(scanErrors, err)
    		}
    	}
`)
//line database_tpl.qtpl:324
		} else {
//line database_tpl.qtpl:325
			for _, attr := range t.Attr {
//line database_tpl.qtpl:325
				qw422016.N().S(`	`)
//line database_tpl.qtpl:326
				if strings.HasPrefix(attr.Name, "pgtype.") || strings.HasPrefix(attr.Name, "psql.") {
//line database_tpl.qtpl:326
					qw422016.N().S(`c.ScanDecoder
`)
//line database_tpl.qtpl:327
				} else {
//line database_tpl.qtpl:327
					qw422016.N().S(`c.ScanValue`)
//line database_tpl.qtpl:327
				}
//line database_tpl.qtpl:327
				qw422016.N().S(`(&dst.`)
//line database_tpl.qtpl:327
				qw422016.E().S(strcase.ToCamel(attr.Name))
//line database_tpl.qtpl:327
				qw422016.N().S(`)
	if err := c.Err(); err != nil {
		logs.ErrorLog(err, "`)
//line database_tpl.qtpl:329
				qw422016.E().S(typeName)
//line database_tpl.qtpl:329
				qw422016.N().S(`.`)
//line database_tpl.qtpl:329
				qw422016.E().S(strcase.ToCamel(attr.Name))
//line database_tpl.qtpl:329
				qw422016.N().S(`")
		scanErrors = errors.Join(scanErrors, err)
	}
`)
//line database_tpl.qtpl:332
			}
//line database_tpl.qtpl:333
		}
//line database_tpl.qtpl:333
		qw422016.N().S(`
	return scanErrors
}

// DecodeBinary implement pgtype.BinaryDecoder interface
func (dst *`)
//line database_tpl.qtpl:339
		qw422016.E().S(typeName)
//line database_tpl.qtpl:339
		qw422016.N().S(`) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	*dst = `)
//line database_tpl.qtpl:340
		qw422016.E().S(typeName)
//line database_tpl.qtpl:340
		qw422016.N().S(`{}
	if len(src) == 0 {
		return nil
	}

`)
//line database_tpl.qtpl:345
		if t.Type == 'r' {
//line database_tpl.qtpl:345
			qw422016.N().S(`	utr, err := pgtype.ParseUntypedBinaryRange(src)
	if err != nil {
		return err
	}
`)
//line database_tpl.qtpl:350
		} else {
//line database_tpl.qtpl:350
			qw422016.N().S(`	c := pgtype.NewCompositeBinaryScanner(ci, src)
	countFields := c.FieldCount()
`)
//line database_tpl.qtpl:353
		}
//line database_tpl.qtpl:353
		qw422016.N().S(`	var scanErrors error
`)
//line database_tpl.qtpl:355
		if t.Type == 'r' {
//line database_tpl.qtpl:355
			qw422016.N().S(`    	dst.LowerType = utr.LowerType
    	dst.UpperType = utr.UpperType

    	if dst.LowerType == pgtype.Empty {
    		return nil
    	}

    	if dst.LowerType == pgtype.Inclusive || dst.LowerType == pgtype.Exclusive {
    		if err := dst.Lower.DecodeBinary(ci, utr.Lower); err != nil {
    			scanErrors = errors.Join(scanErrors, err)
    		}
    	}

    	if dst.UpperType == pgtype.Inclusive || dst.UpperType == pgtype.Exclusive {
    		if err := dst.Upper.DecodeBinary(ci, utr.Upper); err != nil {
    			scanErrors = errors.Join(scanErrors, err)
    		}
    	}
`)
//line database_tpl.qtpl:374
		} else {
//line database_tpl.qtpl:375
			for i, attr := range t.Attr {
//line database_tpl.qtpl:375
				qw422016.N().S(`	//	    rich end of elements
	if countFields < `)
//line database_tpl.qtpl:377
				qw422016.N().D(i + 1)
//line database_tpl.qtpl:377
				qw422016.N().S(` || !c.Next() {
		return nil
	}
	if err := `)
//line database_tpl.qtpl:380
				if strings.HasPrefix(attr.Name, "pgtype.") || strings.HasPrefix(attr.Name, "psql.") {
//line database_tpl.qtpl:380
					qw422016.N().S(`&dst.`)
//line database_tpl.qtpl:380
					qw422016.E().S(strcase.ToCamel(attr.Name))
//line database_tpl.qtpl:380
					qw422016.N().S(`.DecodeBinary(ci, c.Bytes())
`)
//line database_tpl.qtpl:381
				} else {
//line database_tpl.qtpl:381
					qw422016.N().S(`ci.Scan(c.OID(), pgtype.BinaryFormatCode, c.Bytes(), &dst.`)
//line database_tpl.qtpl:381
					qw422016.E().S(strcase.ToCamel(attr.Name))
//line database_tpl.qtpl:381
					qw422016.N().S(`)`)
//line database_tpl.qtpl:381
				}
//line database_tpl.qtpl:381
				qw422016.N().S(`; err != nil {
		logs.ErrorLog(err, "`)
//line database_tpl.qtpl:382
				qw422016.E().S(typeName)
//line database_tpl.qtpl:382
				qw422016.N().S(`.`)
//line database_tpl.qtpl:382
				qw422016.E().S(strcase.ToCamel(attr.Name))
//line database_tpl.qtpl:382
				qw422016.N().S(`")
		scanErrors = errors.Join(scanErrors, err)
	}
`)
//line database_tpl.qtpl:385
			}
//line database_tpl.qtpl:386
		}
//line database_tpl.qtpl:386
		qw422016.N().S(`
	return scanErrors
}

// Scan implement sql.Scanner interface
func (dst *`)
//line database_tpl.qtpl:392
		qw422016.E().S(typeName)
//line database_tpl.qtpl:392
		qw422016.N().S(`) Scan(src any) error {
	switch src := src.(type) {
	case nil:
		*dst = `)
//line database_tpl.qtpl:395
		qw422016.E().S(typeName)
//line database_tpl.qtpl:395
		qw422016.N().S(`{}
		return nil
	case string:
		return dst.DecodeText(nil, gotools.StringToBytes(src))
	case []byte:
		return dst.DecodeText(nil, src)
	default:
		return fmt.Errorf("cannot scan %T", src)
	}
}
`)
//line database_tpl.qtpl:405
	}
//line database_tpl.qtpl:406
}

//line database_tpl.qtpl:406
func (c *Creator) WriteCreateTypeInterface(qq422016 qtio422016.Writer, t dbEngine.Types, typeName, name, typeCol string) {
//line database_tpl.qtpl:406
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:406
	c.StreamCreateTypeInterface(qw422016, t, typeName, name, typeCol)
//line database_tpl.qtpl:406
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:406
}

//line database_tpl.qtpl:406
func (c *Creator) CreateTypeInterface(t dbEngine.Types, typeName, name, typeCol string) string {
//line database_tpl.qtpl:406
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:406
	c.WriteCreateTypeInterface(qb422016, t, typeName, name, typeCol)
//line database_tpl.qtpl:406
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:406
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:406
	return qs422016
//line database_tpl.qtpl:406
}

// end CreateTypeInterface
//

//line database_tpl.qtpl:409
func (c *Creator) StreamCreateTableConstructor(qw422016 *qt422016.Writer, cName, name string) {
//line database_tpl.qtpl:409
	qw422016.N().S(`// New`)
//line database_tpl.qtpl:410
	qw422016.E().S(cName)
//line database_tpl.qtpl:410
	qw422016.N().S(` create new instance of table `)
//line database_tpl.qtpl:410
	qw422016.E().S(cName)
//line database_tpl.qtpl:410
	qw422016.N().S(`
func (d *Database) New`)
//line database_tpl.qtpl:411
	qw422016.E().S(cName)
//line database_tpl.qtpl:411
	qw422016.N().S(`(ctx context.Context) (*`)
//line database_tpl.qtpl:411
	qw422016.E().S(cName)
//line database_tpl.qtpl:411
	qw422016.N().S(`, error) {
	const name = "`)
//line database_tpl.qtpl:412
	qw422016.E().S(name)
//line database_tpl.qtpl:412
	qw422016.N().S(`"
	table, ok := d.Tables[name]
    if !ok {
		var err error
		table, err = New`)
//line database_tpl.qtpl:416
	qw422016.E().S(cName)
//line database_tpl.qtpl:416
	qw422016.N().S(`FromConn(ctx, d.PsqlConn())
		if err != nil {
			return nil, err
		}
		d.Tables[name] = table
    }

    return &`)
//line database_tpl.qtpl:423
	qw422016.E().S(cName)
//line database_tpl.qtpl:423
	qw422016.N().S(`{
		Table: table.(*psql.Table),
    }, nil
}
`)
//line database_tpl.qtpl:427
}

//line database_tpl.qtpl:427
func (c *Creator) WriteCreateTableConstructor(qq422016 qtio422016.Writer, cName, name string) {
//line database_tpl.qtpl:427
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:427
	c.StreamCreateTableConstructor(qw422016, cName, name)
//line database_tpl.qtpl:427
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:427
}

//line database_tpl.qtpl:427
func (c *Creator) CreateTableConstructor(cName, name string) string {
//line database_tpl.qtpl:427
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:427
	c.WriteCreateTableConstructor(qb422016, cName, name)
//line database_tpl.qtpl:427
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:427
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:427
	return qs422016
//line database_tpl.qtpl:427
}
