// Code generated by qtc from "database_tpl.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line database_tpl.qtpl:1
package _go

//line database_tpl.qtpl:2
import (
	"fmt"

	"github.com/iancoleman/strcase"
	"github.com/ruslanBik4/dbEngine/dbEngine"
	"github.com/ruslanBik4/dbEngine/dbEngine/psql"
	"github.com/ruslanBik4/dbEngine/typesExt"
)

//line database_tpl.qtpl:13
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line database_tpl.qtpl:13
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line database_tpl.qtpl:13
func (c *Creator) StreamCreateDatabase(qw422016 *qt422016.Writer, listRoutines []string) {
//line database_tpl.qtpl:13
	qw422016.N().S(`
// Code generated by dbEngine-gen-go. DO NOT EDIT!
// versions:
// 	dbEngine v1.1.6
// source: %s %s
package db

import (
	"fmt"
	"time"
	"strings"
`)
//line database_tpl.qtpl:24
	for _, lib := range c.packages {
//line database_tpl.qtpl:24
		qw422016.N().S(`"`)
//line database_tpl.qtpl:24
		qw422016.E().S(lib)
//line database_tpl.qtpl:24
		qw422016.N().S(`"
`)
//line database_tpl.qtpl:25
	}
//line database_tpl.qtpl:25
	qw422016.N().S(`
	"github.com/jackc/pgconn"

	"github.com/ruslanBik4/logs"
	"github.com/ruslanBik4/dbEngine/dbEngine"
    "github.com/ruslanBik4/dbEngine/dbEngine/psql"

	"golang.org/x/net/context"
	"github.com/pkg/errors"
)
`)
//line database_tpl.qtpl:36
	for name, typ := range c.db.Types {
//line database_tpl.qtpl:36
		StreamCreateTypeInterface(qw422016, typ, strcase.ToCamel(name), name, c.Types[name])
//line database_tpl.qtpl:36
	}
//line database_tpl.qtpl:36
	qw422016.N().S(`
// Database is root interface for operation for %s.%s
type Database struct {
	*dbEngine.DB
	CreateAt time.Time
}
// NewDatabase create new Database with minimal necessary handlers
func NewDatabase(ctx context.Context, noticeHandler pgconn.NoticeHandler, channelHandler pgconn.NotificationHandler, channels ...string) (*Database, error) {
	if noticeHandler == nil {
		noticeHandler = printNotice
	}
	conn := psql.NewConn(nil, nil, noticeHandler, channels...)
	if channelHandler != nil {
		conn.ChannelHandler = channelHandler
	}

	DB, err := dbEngine.NewDB(ctx, conn)
	if err != nil {
		logs.ErrorLog(err, "")
		return nil, err
	}

	return &Database{DB, time.Now()}, nil
}
// PsqlConn return connection as *psql.Conn
// need for some low-level operation,
// invoke Conn.Select...(custom sql),
//        New{table_name}FromConn, etc.
func (d *Database) PsqlConn() *psql.Conn {
	return (d.Conn).(*psql.Conn)
}
`)
//line database_tpl.qtpl:68
	for name := range c.db.Tables {
//line database_tpl.qtpl:68
		c.StreamCreateTableConstructor(qw422016, strcase.ToCamel(name), name)
//line database_tpl.qtpl:68
	}
//line database_tpl.qtpl:69
	for _, name := range listRoutines {
//line database_tpl.qtpl:69
		c.StreamCreateRoutinesInvoker(qw422016, c.db.Routines[name].(*psql.Routine), name)
//line database_tpl.qtpl:69
	}
//line database_tpl.qtpl:69
	qw422016.N().S(`// printNotice logging some psql messages (invoked command 'RAISE ...')
func printNotice(c *pgconn.PgConn, n *pgconn.Notice) {

	switch {
    case n.Code == "42P07" || strings.Contains(n.Message, "skipping") :
		logs.DebugLog("skip operation: %%s", n.Message)

	case n.Severity == "INFO" :
		logs.StatusLog(n.Message)

	case n.Code > "00000" :
		err := (*pgconn.PgError)(n)
		logs.CustomLog(logs.CRITICAL, "DB_EXEC",  err.File, int(err.Line),
			fmt.Sprintf("%v, hint: %s, where: %s, %s %s", err, n.Hint, n.Where,  err.SQLState(), err.Routine), logs.FgErr)

	case strings.HasPrefix(n.Message, "[[ERROR]]") :
		logs.ErrorLog(errors.New(strings.TrimPrefix(n.Message, "[[ERROR]]") + n.Severity))

	default: // DEBUG
		logs.DebugLog("%+v %s (PID:%d)", n.Severity, n.Message, c.PID())
	}
}
`)
//line database_tpl.qtpl:92
}

//line database_tpl.qtpl:92
func (c *Creator) WriteCreateDatabase(qq422016 qtio422016.Writer, listRoutines []string) {
//line database_tpl.qtpl:92
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:92
	c.StreamCreateDatabase(qw422016, listRoutines)
//line database_tpl.qtpl:92
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:92
}

//line database_tpl.qtpl:92
func (c *Creator) CreateDatabase(listRoutines []string) string {
//line database_tpl.qtpl:92
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:92
	c.WriteCreateDatabase(qb422016, listRoutines)
//line database_tpl.qtpl:92
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:92
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:92
	return qs422016
//line database_tpl.qtpl:92
}

//line database_tpl.qtpl:94
func StreamCreateTypeInterface(qw422016 *qt422016.Writer, t dbEngine.Types, cName, name, typeCol string) {
//line database_tpl.qtpl:95
	if len(t.Enumerates) > 0 {
//line database_tpl.qtpl:96
	} else {
//line database_tpl.qtpl:96
		qw422016.N().S(`// `)
//line database_tpl.qtpl:97
		qw422016.E().S(cName)
//line database_tpl.qtpl:97
		qw422016.N().S(` create new instance of type `)
//line database_tpl.qtpl:97
		qw422016.E().S(name)
//line database_tpl.qtpl:97
		qw422016.N().S(`
type `)
//line database_tpl.qtpl:98
		qw422016.E().S(cName)
//line database_tpl.qtpl:98
		qw422016.N().S(` struct {
`)
//line database_tpl.qtpl:99
		for name, tName := range t.Attr {
//line database_tpl.qtpl:99
			qw422016.N().S(`	`)
//line database_tpl.qtpl:100
			qw422016.N().S(fmt.Sprintf("%-21s\t%-11s\t", strcase.ToCamel(name), tName))
//line database_tpl.qtpl:100
			qw422016.N().S(` `)
//line database_tpl.qtpl:100
			qw422016.N().S("`")
//line database_tpl.qtpl:100
			qw422016.N().S(`json:"`)
//line database_tpl.qtpl:100
			qw422016.E().S(name)
//line database_tpl.qtpl:100
			qw422016.N().S(`"`)
//line database_tpl.qtpl:100
			qw422016.N().S("`")
//line database_tpl.qtpl:100
			qw422016.N().S(`
`)
//line database_tpl.qtpl:101
		}
//line database_tpl.qtpl:101
		qw422016.N().S(`}

func (dst *`)
//line database_tpl.qtpl:104
		qw422016.E().S(cName)
//line database_tpl.qtpl:104
		qw422016.N().S(`) DecodeText(ci *pgtype.ConnInfo, src []byte) error {
	if len(src) == 0 {
		*dst = `)
//line database_tpl.qtpl:106
		qw422016.E().S(cName)
//line database_tpl.qtpl:106
		qw422016.N().S(`{}
		return nil
	}
	srcPart := bytes.Split(src[1:len(src)-1], []byte(","))
    *dst = `)
//line database_tpl.qtpl:110
		qw422016.E().S(cName)
//line database_tpl.qtpl:110
		qw422016.N().S(`{
`)
//line database_tpl.qtpl:111
		i := 0

//line database_tpl.qtpl:112
		for name, tName := range t.Attr {
//line database_tpl.qtpl:112
			qw422016.N().S(`		`)
//line database_tpl.qtpl:113
			qw422016.N().S(fmt.Sprintf(`%-21s: psql.Get%sFromByte(ci, srcPart[%d], "%s")`, strcase.ToCamel(name), strcase.ToCamel(tName), i, name))
//line database_tpl.qtpl:113
			qw422016.N().S(`,
`)
//line database_tpl.qtpl:114
			i++

//line database_tpl.qtpl:115
		}
//line database_tpl.qtpl:115
		qw422016.N().S(`	}

	return nil
}
`)
//line database_tpl.qtpl:120
	}
//line database_tpl.qtpl:121
}

//line database_tpl.qtpl:121
func WriteCreateTypeInterface(qq422016 qtio422016.Writer, t dbEngine.Types, cName, name, typeCol string) {
//line database_tpl.qtpl:121
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:121
	StreamCreateTypeInterface(qw422016, t, cName, name, typeCol)
//line database_tpl.qtpl:121
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:121
}

//line database_tpl.qtpl:121
func CreateTypeInterface(t dbEngine.Types, cName, name, typeCol string) string {
//line database_tpl.qtpl:121
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:121
	WriteCreateTypeInterface(qb422016, t, cName, name, typeCol)
//line database_tpl.qtpl:121
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:121
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:121
	return qs422016
//line database_tpl.qtpl:121
}

//line database_tpl.qtpl:123
func (c *Creator) StreamCreateRoutinesInvoker(qw422016 *qt422016.Writer, r *psql.Routine, name string) {
//line database_tpl.qtpl:125
	camelName := strcase.ToCamel(name)
	args := make([]any, len(r.Params()))
	sql, _, _ := r.BuildSql(dbEngine.ArgsForSelect(args...))
	typeReturn := ""

//line database_tpl.qtpl:130
	if r.Type == psql.ROUTINE_TYPE_PROC {
//line database_tpl.qtpl:130
		qw422016.N().S(`
// `)
//line database_tpl.qtpl:131
		qw422016.E().S(camelName)
//line database_tpl.qtpl:131
		qw422016.N().S(` call procedure '`)
//line database_tpl.qtpl:131
		qw422016.E().S(name)
//line database_tpl.qtpl:131
		qw422016.N().S(`'
// DB comment: '`)
//line database_tpl.qtpl:132
		qw422016.E().S(r.Comment)
//line database_tpl.qtpl:132
		qw422016.N().S(`'
func (d *Database) `)
//line database_tpl.qtpl:133
		qw422016.E().S(camelName)
//line database_tpl.qtpl:133
		qw422016.N().S(`(ctx context.Context,
				`)
//line database_tpl.qtpl:134
		c.streamparamsTitle(qw422016, r)
//line database_tpl.qtpl:134
		qw422016.N().S(`
) error {
	return d.Conn.ExecDDL(ctx,
				`)
//line database_tpl.qtpl:134
		qw422016.N().S("`")
//line database_tpl.qtpl:137
		qw422016.E().S(sql)
//line database_tpl.qtpl:137
		qw422016.N().S(``)
//line database_tpl.qtpl:137
		qw422016.N().S("`")
//line database_tpl.qtpl:137
		qw422016.N().S(`,
				`)
//line database_tpl.qtpl:138
		c.streamparamsArgs(qw422016, r)
//line database_tpl.qtpl:138
		qw422016.N().S(`
			)
}
`)
//line database_tpl.qtpl:141
	} else {
//line database_tpl.qtpl:141
		qw422016.N().S(`
`)
//line database_tpl.qtpl:142
		switch len(r.Columns()) {
//line database_tpl.qtpl:143
		case 0:
//line database_tpl.qtpl:143
			qw422016.N().S(`
`)
//line database_tpl.qtpl:145
			toType := psql.UdtNameToType(r.UdtName)
			typeReturn = typesExt.Basic(toType).String()

//line database_tpl.qtpl:148
		case 1:
//line database_tpl.qtpl:148
			qw422016.N().S(`
`)
//line database_tpl.qtpl:150
			param := r.Columns()[0]
			typeReturn, _ = c.chkTypes(param, strcase.ToCamel(param.Name()))

//line database_tpl.qtpl:153
		default:
//line database_tpl.qtpl:153
			qw422016.N().S(`// `)
//line database_tpl.qtpl:154
			qw422016.E().S(camelName)
//line database_tpl.qtpl:154
			qw422016.N().S(`RowScanner run query with select
type `)
//line database_tpl.qtpl:155
			qw422016.E().S(camelName)
//line database_tpl.qtpl:155
			qw422016.N().S(`RowScanner struct {
`)
//line database_tpl.qtpl:156
			for _, param := range r.Columns() {
//line database_tpl.qtpl:158
				s := strcase.ToCamel(param.Name())
				typeCol, _ := c.chkTypes(param, s)

//line database_tpl.qtpl:160
				qw422016.N().S(`	`)
//line database_tpl.qtpl:161
				qw422016.E().S(s)
//line database_tpl.qtpl:161
				qw422016.N().S(` `)
//line database_tpl.qtpl:161
				qw422016.E().S(typeCol)
//line database_tpl.qtpl:161
				qw422016.N().S(`
`)
//line database_tpl.qtpl:162
			}
//line database_tpl.qtpl:162
			qw422016.N().S(`}
// GetFields implement dbEngine.RowScanner interface
func (r *`)
//line database_tpl.qtpl:165
			qw422016.E().S(camelName)
//line database_tpl.qtpl:165
			qw422016.N().S(`RowScanner) GetFields(columns []dbEngine.Column) []any {
	v := make([]any, len(columns))
	for i, col := range columns {
		switch col.Name() {
`)
//line database_tpl.qtpl:169
			for _, param := range r.Columns() {
//line database_tpl.qtpl:169
				qw422016.N().S(`		case "`)
//line database_tpl.qtpl:170
				qw422016.E().S(param.Name())
//line database_tpl.qtpl:170
				qw422016.N().S(`":
			v[i] =  &r.`)
//line database_tpl.qtpl:171
				qw422016.N().S(strcase.ToCamel(param.Name()))
//line database_tpl.qtpl:171
				qw422016.N().S(`
`)
//line database_tpl.qtpl:172
			}
//line database_tpl.qtpl:172
			qw422016.N().S(`		}
	}

	return v
}
`)
//line database_tpl.qtpl:178
		}
//line database_tpl.qtpl:178
		qw422016.N().S(`// `)
//line database_tpl.qtpl:179
		qw422016.E().S(camelName)
//line database_tpl.qtpl:179
		qw422016.N().S(` run query with select DB function '`)
//line database_tpl.qtpl:179
		qw422016.E().S(name)
//line database_tpl.qtpl:179
		qw422016.N().S(`'
// DB comment: '`)
//line database_tpl.qtpl:180
		qw422016.E().S(r.Comment)
//line database_tpl.qtpl:180
		qw422016.N().S(`'
// ATTENTION! It returns only 1 row
func (d *Database) `)
//line database_tpl.qtpl:182
		qw422016.E().S(camelName)
//line database_tpl.qtpl:182
		qw422016.N().S(`(ctx context.Context,
				`)
//line database_tpl.qtpl:183
		c.streamparamsTitle(qw422016, r)
//line database_tpl.qtpl:183
		qw422016.N().S(`
) (res `)
//line database_tpl.qtpl:184
		if len(r.Columns()) > 1 {
//line database_tpl.qtpl:184
			qw422016.N().S(`*`)
//line database_tpl.qtpl:184
			qw422016.E().S(camelName)
//line database_tpl.qtpl:184
			qw422016.N().S(`RowScanner`)
//line database_tpl.qtpl:184
		} else {
//line database_tpl.qtpl:184
			qw422016.E().S(typeReturn)
//line database_tpl.qtpl:184
		}
//line database_tpl.qtpl:184
		qw422016.N().S(`, err error) {
	err = d.Conn.SelectOneAndScan(ctx,
				&res,
				`)
//line database_tpl.qtpl:184
		qw422016.N().S("`")
//line database_tpl.qtpl:187
		qw422016.E().S(sql)
//line database_tpl.qtpl:187
		qw422016.N().S(`
				FETCH FIRST 1 ROW ONLY`)
//line database_tpl.qtpl:187
		qw422016.N().S("`")
//line database_tpl.qtpl:187
		qw422016.N().S(`,
				`)
//line database_tpl.qtpl:189
		c.streamparamsArgs(qw422016, r)
//line database_tpl.qtpl:189
		qw422016.N().S(`
			)

	return
}
`)
//line database_tpl.qtpl:194
		if r.ReturnType() == "record" {
//line database_tpl.qtpl:194
			qw422016.N().S(`// `)
//line database_tpl.qtpl:195
			qw422016.E().S(camelName)
//line database_tpl.qtpl:195
			qw422016.N().S(` run query with select DB function '`)
//line database_tpl.qtpl:195
			qw422016.E().S(name)
//line database_tpl.qtpl:195
			qw422016.N().S(`'
// DB comment: '`)
//line database_tpl.qtpl:196
			qw422016.E().S(r.Comment)
//line database_tpl.qtpl:196
			qw422016.N().S(`'
// each will get every row from %[1]sRowScanner
func (d *Database) `)
//line database_tpl.qtpl:198
			qw422016.E().S(camelName)
//line database_tpl.qtpl:198
			qw422016.N().S(`Each(ctx context.Context,
	each func(record *`)
//line database_tpl.qtpl:199
			qw422016.E().S(camelName)
//line database_tpl.qtpl:199
			qw422016.N().S(`RowScanner) error,
	`)
//line database_tpl.qtpl:200
			c.streamparamsTitle(qw422016, r)
//line database_tpl.qtpl:200
			qw422016.N().S(`
) error {
	res := &`)
//line database_tpl.qtpl:202
			qw422016.E().S(camelName)
//line database_tpl.qtpl:202
			qw422016.N().S(`RowScanner{}
	err := d.Conn.SelectAndScanEach(ctx,
				func () error {
					if each != nil {
						return each(res)
					}
					return nil
				},
				res,
				`)
//line database_tpl.qtpl:202
			qw422016.N().S("`")
//line database_tpl.qtpl:211
			qw422016.E().S(sql)
//line database_tpl.qtpl:211
			qw422016.N().S(``)
//line database_tpl.qtpl:211
			qw422016.N().S("`")
//line database_tpl.qtpl:211
			qw422016.N().S(`,
				`)
//line database_tpl.qtpl:212
			c.streamparamsArgs(qw422016, r)
//line database_tpl.qtpl:212
			qw422016.N().S(`
		)
	return err
}
`)
//line database_tpl.qtpl:216
		}
//line database_tpl.qtpl:216
		qw422016.N().S(`
`)
//line database_tpl.qtpl:217
	}
//line database_tpl.qtpl:217
	qw422016.N().S(`
`)
//line database_tpl.qtpl:218
}

//line database_tpl.qtpl:218
func (c *Creator) WriteCreateRoutinesInvoker(qq422016 qtio422016.Writer, r *psql.Routine, name string) {
//line database_tpl.qtpl:218
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:218
	c.StreamCreateRoutinesInvoker(qw422016, r, name)
//line database_tpl.qtpl:218
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:218
}

//line database_tpl.qtpl:218
func (c *Creator) CreateRoutinesInvoker(r *psql.Routine, name string) string {
//line database_tpl.qtpl:218
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:218
	c.WriteCreateRoutinesInvoker(qb422016, r, name)
//line database_tpl.qtpl:218
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:218
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:218
	return qs422016
//line database_tpl.qtpl:218
}

//line database_tpl.qtpl:219
func (c *Creator) streamparamsTitle(qw422016 *qt422016.Writer, r *psql.Routine) {
//line database_tpl.qtpl:220
	for _, param := range r.Params() {
//line database_tpl.qtpl:222
		s := strcase.ToLowerCamel(param.Name())
		typeCol, _ := c.chkTypes(param, s)

//line database_tpl.qtpl:224
		qw422016.N().S(`		`)
//line database_tpl.qtpl:225
		qw422016.E().S(s)
//line database_tpl.qtpl:225
		qw422016.N().S(` `)
//line database_tpl.qtpl:225
		qw422016.E().S(typeCol)
//line database_tpl.qtpl:225
		qw422016.N().S(`,
`)
//line database_tpl.qtpl:226
	}
//line database_tpl.qtpl:227
}

//line database_tpl.qtpl:227
func (c *Creator) writeparamsTitle(qq422016 qtio422016.Writer, r *psql.Routine) {
//line database_tpl.qtpl:227
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:227
	c.streamparamsTitle(qw422016, r)
//line database_tpl.qtpl:227
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:227
}

//line database_tpl.qtpl:227
func (c *Creator) paramsTitle(r *psql.Routine) string {
//line database_tpl.qtpl:227
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:227
	c.writeparamsTitle(qb422016, r)
//line database_tpl.qtpl:227
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:227
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:227
	return qs422016
//line database_tpl.qtpl:227
}

//line database_tpl.qtpl:228
func (c *Creator) streamparamsArgs(qw422016 *qt422016.Writer, r *psql.Routine) {
//line database_tpl.qtpl:229
	for _, param := range r.Params() {
//line database_tpl.qtpl:229
		qw422016.N().S(`		`)
//line database_tpl.qtpl:230
		qw422016.E().S(strcase.ToLowerCamel(param.Name()))
//line database_tpl.qtpl:230
		qw422016.N().S(`,
`)
//line database_tpl.qtpl:231
	}
//line database_tpl.qtpl:232
}

//line database_tpl.qtpl:232
func (c *Creator) writeparamsArgs(qq422016 qtio422016.Writer, r *psql.Routine) {
//line database_tpl.qtpl:232
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:232
	c.streamparamsArgs(qw422016, r)
//line database_tpl.qtpl:232
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:232
}

//line database_tpl.qtpl:232
func (c *Creator) paramsArgs(r *psql.Routine) string {
//line database_tpl.qtpl:232
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:232
	c.writeparamsArgs(qb422016, r)
//line database_tpl.qtpl:232
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:232
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:232
	return qs422016
//line database_tpl.qtpl:232
}

//line database_tpl.qtpl:233
func (c *Creator) StreamCreateTableConstructor(qw422016 *qt422016.Writer, cName, name string) {
//line database_tpl.qtpl:233
	qw422016.N().S(`// New`)
//line database_tpl.qtpl:234
	qw422016.E().S(cName)
//line database_tpl.qtpl:234
	qw422016.N().S(` create new instance of table `)
//line database_tpl.qtpl:234
	qw422016.E().S(cName)
//line database_tpl.qtpl:234
	qw422016.N().S(`
func (d *Database) New`)
//line database_tpl.qtpl:235
	qw422016.E().S(cName)
//line database_tpl.qtpl:235
	qw422016.N().S(`(ctx context.Context) (*`)
//line database_tpl.qtpl:235
	qw422016.E().S(cName)
//line database_tpl.qtpl:235
	qw422016.N().S(`, error) {
	const name = "`)
//line database_tpl.qtpl:236
	qw422016.E().S(name)
//line database_tpl.qtpl:236
	qw422016.N().S(`"
	table, ok := d.Tables[name]
    if !ok {
		var err error
		table, err = New`)
//line database_tpl.qtpl:240
	qw422016.E().S(cName)
//line database_tpl.qtpl:240
	qw422016.N().S(`FromConn(ctx, d.PsqlConn())
		if err != nil {
			return nil, err
		}
		d.Tables[name] = table
    }

    return &`)
//line database_tpl.qtpl:247
	qw422016.E().S(cName)
//line database_tpl.qtpl:247
	qw422016.N().S(`{
		Table: table.(*psql.Table),
    }, nil
}
`)
//line database_tpl.qtpl:251
}

//line database_tpl.qtpl:251
func (c *Creator) WriteCreateTableConstructor(qq422016 qtio422016.Writer, cName, name string) {
//line database_tpl.qtpl:251
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:251
	c.StreamCreateTableConstructor(qw422016, cName, name)
//line database_tpl.qtpl:251
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:251
}

//line database_tpl.qtpl:251
func (c *Creator) CreateTableConstructor(cName, name string) string {
//line database_tpl.qtpl:251
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:251
	c.WriteCreateTableConstructor(qb422016, cName, name)
//line database_tpl.qtpl:251
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:251
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:251
	return qs422016
//line database_tpl.qtpl:251
}
