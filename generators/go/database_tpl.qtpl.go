// Code generated by qtc from "database_tpl.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line database_tpl.qtpl:1
package _go

//line database_tpl.qtpl:2
import (
	"fmt"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/ruslanBik4/dbEngine/dbEngine"
	"github.com/ruslanBik4/dbEngine/dbEngine/psql"
)

//line database_tpl.qtpl:12
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line database_tpl.qtpl:12
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line database_tpl.qtpl:12
func (c *Creator) StreamCreateDatabase(qw422016 *qt422016.Writer, listRoutines []string) {
//line database_tpl.qtpl:12
	qw422016.N().S(`
// Code generated by dbEngine-gen-go. DO NOT EDIT!
// Copyright https://github.com/ruslanBik4

/*
DB implements interface for table, view and routines of Database
versions:
 	dbEngine v1.1.6
source: %s %s
*/
package db

import (
	"fmt"
	"errors"
	"time"
	"strings"
`)
//line database_tpl.qtpl:29
	for _, lib := range c.packages {
//line database_tpl.qtpl:29
		qw422016.N().S(`"`)
//line database_tpl.qtpl:29
		qw422016.E().S(lib)
//line database_tpl.qtpl:29
		qw422016.N().S(`"
`)
//line database_tpl.qtpl:30
	}
//line database_tpl.qtpl:30
	qw422016.N().S(`
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"

	"github.com/ruslanBik4/logs"
	"github.com/ruslanBik4/dbEngine/dbEngine"
    "github.com/ruslanBik4/dbEngine/dbEngine/psql"

	"golang.org/x/net/context"
)
type scanError interface{
	ScanValue(d any)
	Err() error
}

`)
//line database_tpl.qtpl:47
	for name, typ := range c.db.Types {
//line database_tpl.qtpl:47
		c.StreamCreateTypeInterface(qw422016, typ, strcase.ToCamel(name), name, c.Types[name])
//line database_tpl.qtpl:47
	}
//line database_tpl.qtpl:47
	qw422016.N().S(`
type CitextArray struct {
	pgtype.TextArray
}

func (dst CitextArray) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBufferString("[")
	for i, text := range dst.Elements {
		if i > 0 {
			buf.WriteString(",")
		}

		buf.WriteString(text.String)
	}

	buf.WriteString("]")

	return buf.Bytes(), nil
}

var customTypes = map[string]*pgtype.DataType{
	"citext": &pgtype.DataType{
		Value: &pgtype.Text{},
		Name:  "citext",
	},
	"_citext": &pgtype.DataType{
		Value: &pgtype.TextArray{}, // (*pgtype.ArrayType)(nil),
		Name:  "[]string",
	},
}
var initCustomTypes bool

const sqlGetTypes = "SELECT typname, oid FROM pg_type WHERE typname::text=ANY($1)"

func getOidCustomTypes(ctx context.Context, conn *pgx.Conn) error {
	params := make([]string, 0, len(customTypes))
	for name := range customTypes {
		params = append(params, name)
	}

	rows, err := conn.Query(ctx, sqlGetTypes, params)
	if err != nil {
		return err
	}

	for rows.Next() {
		var name string
		var oid uint32
		err = rows.Scan(&name, &oid)
		if err != nil {
			return err
		}
		if c, ok := customTypes[name]; ok && c.Value == (*pgtype.ArrayType)(nil) {
			c.Value = pgtype.NewArrayType(name, oid, func() pgtype.ValueTranscoder {
				return &pgtype.Text{}
			}).NewTypeValue()
			c.OID = oid
			logs.DebugLog(c)
		} else if ok {
			customTypes[name].OID = oid
		}
	}

	if rows.Err() != nil {
		logs.ErrorLog(rows.Err(), " cannot get oid for customTypes")
	}

	return err
}

// afterConnect create need types & register on conn
func afterConnect(ctx context.Context, conn *pgx.Conn) error {
	// Override registered handler for point
	if !initCustomTypes {
		err := getOidCustomTypes(ctx, conn)
		if err != nil {
			return err
		}

		initCustomTypes = true
	}

	mess := "DB registered type (name, oid): "
	for name, val := range customTypes {
		conn.ConnInfo().RegisterDataType(*val)
		mess += fmt.Sprintf("(%s,%v, %T) ", name, val.OID, val.Value)
	}

	logs.StatusLog(conn.PgConn().Conn().LocalAddr().String(), mess)

	return nil
}

// Database is root interface for operation for %s.%s
type Database struct {
	*dbEngine.DB
	CreateAt time.Time
}
// NewDatabase create new Database with minimal necessary handlers
func NewDatabase(ctx context.Context, noticeHandler pgconn.NoticeHandler, channelHandler pgconn.NotificationHandler, channels ...string) (*Database, error) {
	if noticeHandler == nil {
		noticeHandler = printNotice
	}
	conn := psql.NewConnWithOptions(
		psql.AfterConnect(afterConnect),
		psql.NoticeHandler(noticeHandler),
		psql.ChannelHandler(channelHandler),
		psql.Channels(channels...),
	)

	DB, err := dbEngine.NewDB(ctx, conn)
	if err != nil {
		logs.ErrorLog(err, "new DB")
		return nil, err
	}

	return &Database{DB, time.Now()}, nil
}
// PsqlConn return connection as *psql.Conn
// need for some low-level operation,
// invoke Conn.Select...(custom sql),
//        New{table_name}FromConn, etc.
func (d *Database) PsqlConn() *psql.Conn {
	return (d.Conn).(*psql.Conn)
}
`)
//line database_tpl.qtpl:173
	for name := range c.db.Tables {
//line database_tpl.qtpl:173
		c.StreamCreateTableConstructor(qw422016, strcase.ToCamel(name), name)
//line database_tpl.qtpl:173
	}
//line database_tpl.qtpl:174
	for _, name := range listRoutines {
//line database_tpl.qtpl:174
		c.StreamCreateRoutinesInvoker(qw422016, c.db.Routines[name].(*psql.Routine), name)
//line database_tpl.qtpl:174
	}
//line database_tpl.qtpl:174
	qw422016.N().S(`// printNotice logging some psql messages (invoked command 'RAISE ...')
func printNotice(c *pgconn.PgConn, n *pgconn.Notice) {

	switch {
    case n.Code == "42P07" || strings.Contains(n.Message, "skipping") :
		logs.DebugLog("skip operation: %s", n.Message)

	case n.Severity == "INFO" :
		logs.StatusLog(n.Message)

	case n.Code > "00000" :
		err := (*pgconn.PgError)(n)
		logs.CustomLog(logs.CRITICAL, "DB_EXEC",  err.File, int(err.Line),
			fmt.Sprintf("%v, hint: %s, where: %s, %s %s", err, n.Hint, n.Where,  err.SQLState(), err.Routine), logs.FgErr)

	case strings.HasPrefix(n.Message, "[[ERROR]]") :
		logs.ErrorLog(errors.New(strings.TrimPrefix(n.Message, "[[ERROR]]") + n.Severity))

	default: // DEBUG
		logs.DebugLog("%+v %s (PID:%d)", n.Severity, n.Message, c.PID())
	}
}
`)
//line database_tpl.qtpl:197
}

//line database_tpl.qtpl:197
func (c *Creator) WriteCreateDatabase(qq422016 qtio422016.Writer, listRoutines []string) {
//line database_tpl.qtpl:197
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:197
	c.StreamCreateDatabase(qw422016, listRoutines)
//line database_tpl.qtpl:197
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:197
}

//line database_tpl.qtpl:197
func (c *Creator) CreateDatabase(listRoutines []string) string {
//line database_tpl.qtpl:197
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:197
	c.WriteCreateDatabase(qb422016, listRoutines)
//line database_tpl.qtpl:197
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:197
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:197
	return qs422016
//line database_tpl.qtpl:197
}

//line database_tpl.qtpl:199
func (c *Creator) StreamCreateTypeInterface(qw422016 *qt422016.Writer, t dbEngine.Types, typeName, name, typeCol string) {
//line database_tpl.qtpl:200
	if len(t.Enumerates) > 0 {
//line database_tpl.qtpl:201
	} else {
//line database_tpl.qtpl:201
		qw422016.N().S(`// `)
//line database_tpl.qtpl:202
		qw422016.E().S(typeName)
//line database_tpl.qtpl:202
		qw422016.N().S(` create new instance of type `)
//line database_tpl.qtpl:202
		qw422016.E().S(name)
//line database_tpl.qtpl:202
		qw422016.N().S(`
type `)
//line database_tpl.qtpl:203
		qw422016.E().S(typeName)
//line database_tpl.qtpl:203
		qw422016.N().S(` struct {
`)
//line database_tpl.qtpl:204
		for _, attr := range t.Attr {
//line database_tpl.qtpl:204
			qw422016.N().S(`	`)
//line database_tpl.qtpl:205
			qw422016.N().S(fmt.Sprintf("%-21s\t%-13s\t", strcase.ToCamel(attr.Name), attr.Type))
//line database_tpl.qtpl:205
			qw422016.N().S(` `)
//line database_tpl.qtpl:205
			qw422016.N().S("`")
//line database_tpl.qtpl:205
			qw422016.N().S(`json:"`)
//line database_tpl.qtpl:205
			qw422016.E().S(attr.Name)
//line database_tpl.qtpl:205
			qw422016.N().S(`"`)
//line database_tpl.qtpl:205
			qw422016.N().S("`")
//line database_tpl.qtpl:205
			qw422016.N().S(`
`)
//line database_tpl.qtpl:206
		}
//line database_tpl.qtpl:207
		if t.Type == 'r' {
//line database_tpl.qtpl:207
			qw422016.N().S(`	LowerType pgtype.BoundType
	UpperType pgtype.BoundType
`)
//line database_tpl.qtpl:210
		}
//line database_tpl.qtpl:210
		qw422016.N().S(`}
// DecodeText implement pgtype.TextDecoder interface
func (dst *`)
//line database_tpl.qtpl:213
		qw422016.E().S(typeName)
//line database_tpl.qtpl:213
		qw422016.N().S(`) DecodeText(ci *pgtype.ConnInfo, src []byte) error {
	if len(src) == 0 {
		*dst = `)
//line database_tpl.qtpl:215
		qw422016.E().S(typeName)
//line database_tpl.qtpl:215
		qw422016.N().S(`{}
		return nil
	}
`)
//line database_tpl.qtpl:218
		if t.Type == 'r' {
//line database_tpl.qtpl:218
			qw422016.N().S(`	utr, err := pgtype.ParseUntypedTextRange(gotools.BytesToString(src))
	if err != nil {
		return err
	}
`)
//line database_tpl.qtpl:223
		} else {
//line database_tpl.qtpl:223
			qw422016.N().S(`	c := pgtype.NewCompositeTextScanner(ci, src)
`)
//line database_tpl.qtpl:225
		}
//line database_tpl.qtpl:225
		qw422016.N().S(`    *dst = `)
//line database_tpl.qtpl:226
		qw422016.E().S(typeName)
//line database_tpl.qtpl:226
		qw422016.N().S(`{}
	var scanErrors error

`)
//line database_tpl.qtpl:229
		if t.Type == 'r' {
//line database_tpl.qtpl:229
			qw422016.N().S(`    	dst.LowerType = utr.LowerType
    	dst.UpperType = utr.UpperType

    	if dst.LowerType == pgtype.Empty {
    		return nil
    	}

    	var scanErrors error
    	if dst.LowerType == pgtype.Inclusive || dst.LowerType == pgtype.Exclusive {
    		if err := dst.Lower.DecodeText(ci, gotools.StringToBytes(utr.Lower)); err != nil {
    			scanErrors = errors.Join(scanErrors, err)
    		}
    	}

    	if dst.UpperType == pgtype.Inclusive || dst.UpperType == pgtype.Exclusive {
    		if err := dst.Upper.DecodeText(ci, gotools.StringToBytes(utr.Upper)); err != nil {
    			scanErrors = errors.Join(scanErrors, err)
    		}
    	}
`)
//line database_tpl.qtpl:249
		} else {
//line database_tpl.qtpl:249
			qw422016.N().S(`
`)
//line database_tpl.qtpl:251
			for _, attr := range t.Attr {
//line database_tpl.qtpl:251
				qw422016.N().S(`	`)
//line database_tpl.qtpl:252
				if strings.HasPrefix(attr.Name, "pgtype.") || strings.HasPrefix(attr.Name, "psql.") {
//line database_tpl.qtpl:252
					qw422016.N().S(`c.ScanDecoder
`)
//line database_tpl.qtpl:253
				} else {
//line database_tpl.qtpl:253
					qw422016.N().S(`c.ScanValue`)
//line database_tpl.qtpl:253
				}
//line database_tpl.qtpl:253
				qw422016.N().S(`	(&dst.`)
//line database_tpl.qtpl:254
				qw422016.E().S(strcase.ToCamel(attr.Name))
//line database_tpl.qtpl:254
				qw422016.N().S(`)
	if err := c.Err(); err != nil {
		logs.ErrorLog(err, "`)
//line database_tpl.qtpl:256
				qw422016.E().S(typeName)
//line database_tpl.qtpl:256
				qw422016.N().S(`.`)
//line database_tpl.qtpl:256
				qw422016.E().S(strcase.ToCamel(attr.Name))
//line database_tpl.qtpl:256
				qw422016.N().S(`")
		scanErrors = errors.Join(scanErrors, err)
	}
`)
//line database_tpl.qtpl:259
			}
//line database_tpl.qtpl:260
		}
//line database_tpl.qtpl:260
		qw422016.N().S(`
	return scanError
}
// DecodeBinary implement pgtype.BinaryDecoder interface
func (dst *`)
//line database_tpl.qtpl:265
		qw422016.E().S(typeName)
//line database_tpl.qtpl:265
		qw422016.N().S(`) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	if len(src) == 0 {
		*dst = `)
//line database_tpl.qtpl:267
		qw422016.E().S(typeName)
//line database_tpl.qtpl:267
		qw422016.N().S(`{}
		return nil
	}

`)
//line database_tpl.qtpl:271
		if t.Type == 'r' {
//line database_tpl.qtpl:271
			qw422016.N().S(`	utr, err := pgtype.ParseUntypedBinaryRange(src)
	if err != nil {
		return err
	}
`)
//line database_tpl.qtpl:276
		} else {
//line database_tpl.qtpl:276
			qw422016.N().S(`	c := pgtype.NewCompositeBinaryScanner(ci, src)
	countFields := c.FieldCount()
`)
//line database_tpl.qtpl:279
		}
//line database_tpl.qtpl:279
		qw422016.N().S(`    *dst = `)
//line database_tpl.qtpl:280
		qw422016.E().S(typeName)
//line database_tpl.qtpl:280
		qw422016.N().S(`{}
	var scanErrors error

`)
//line database_tpl.qtpl:283
		if t.Type == 'r' {
//line database_tpl.qtpl:283
			qw422016.N().S(`    	dst.LowerType = utr.LowerType
    	dst.UpperType = utr.UpperType

    	if dst.LowerType == pgtype.Empty {
    		return nil
    	}

    	if dst.LowerType == pgtype.Inclusive || dst.LowerType == pgtype.Exclusive {
    		if err := dst.Lower.DecodeBinary(ci, utr.Lower); err != nil {
    			scanErrors = errors.Join(scanErrors, err)
    		}
    	}

    	if dst.UpperType == pgtype.Inclusive || dst.UpperType == pgtype.Exclusive {
    		if err := dst.Upper.DecodeBinary(ci, utr.Upper); err != nil {
    			scanErrors = errors.Join(scanErrors, err)
    		}
    	}
`)
//line database_tpl.qtpl:302
		} else {
//line database_tpl.qtpl:303
			for i, attr := range t.Attr {
//line database_tpl.qtpl:303
				qw422016.N().S(`	//	    rich end of elements
	if  countFields < `)
//line database_tpl.qtpl:305
				qw422016.N().D(i + 1)
//line database_tpl.qtpl:305
				qw422016.N().S(` || !c.Next(){
		return nil
	}
	if err := `)
//line database_tpl.qtpl:308
				if strings.HasPrefix(attr.Name, "pgtype.") || strings.HasPrefix(attr.Name, "psql.") {
//line database_tpl.qtpl:308
					qw422016.N().S(`&dst.`)
//line database_tpl.qtpl:308
					qw422016.E().S(strcase.ToCamel(attr.Name))
//line database_tpl.qtpl:308
					qw422016.N().S(`.DecodeBinary(ci, c.Bytes())
`)
//line database_tpl.qtpl:309
				} else {
//line database_tpl.qtpl:309
					qw422016.N().S(`ci.Scan(c.OID(), pgtype.BinaryFormatCode, c.Bytes(), &dst.`)
//line database_tpl.qtpl:309
					qw422016.E().S(strcase.ToCamel(attr.Name))
//line database_tpl.qtpl:309
					qw422016.N().S(`)`)
//line database_tpl.qtpl:309
				}
//line database_tpl.qtpl:309
				qw422016.N().S(`; err != nil {
		logs.ErrorLog(err, "`)
//line database_tpl.qtpl:310
				qw422016.E().S(typeName)
//line database_tpl.qtpl:310
				qw422016.N().S(`.`)
//line database_tpl.qtpl:310
				qw422016.E().S(strcase.ToCamel(attr.Name))
//line database_tpl.qtpl:310
				qw422016.N().S(`")
		scanErrors = errors.Join(scanErrors, err)
	}
`)
//line database_tpl.qtpl:313
			}
//line database_tpl.qtpl:314
		}
//line database_tpl.qtpl:314
		qw422016.N().S(`
	return scanErrors
}
// Scan implement sql.Scanner interface
func (dst *`)
//line database_tpl.qtpl:319
		qw422016.E().S(typeName)
//line database_tpl.qtpl:319
		qw422016.N().S(`) Scan(src any) error {
	switch src := src.(type) {
	case nil:
		*dst = `)
//line database_tpl.qtpl:322
		qw422016.E().S(typeName)
//line database_tpl.qtpl:322
		qw422016.N().S(`{}
	case string:
		return dst.DecodeText(nil, gotools.StringToBytes(src))
	case []byte:
		return dst.DecodeText(nil, src)
	default:
		return fmt.Errorf("cannot scan %T", src)
	}
}
`)
//line database_tpl.qtpl:331
	}
//line database_tpl.qtpl:332
}

//line database_tpl.qtpl:332
func (c *Creator) WriteCreateTypeInterface(qq422016 qtio422016.Writer, t dbEngine.Types, typeName, name, typeCol string) {
//line database_tpl.qtpl:332
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:332
	c.StreamCreateTypeInterface(qw422016, t, typeName, name, typeCol)
//line database_tpl.qtpl:332
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:332
}

//line database_tpl.qtpl:332
func (c *Creator) CreateTypeInterface(t dbEngine.Types, typeName, name, typeCol string) string {
//line database_tpl.qtpl:332
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:332
	c.WriteCreateTypeInterface(qb422016, t, typeName, name, typeCol)
//line database_tpl.qtpl:332
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:332
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:332
	return qs422016
//line database_tpl.qtpl:332
}

// end CreateTypeInterface
//

//line database_tpl.qtpl:335
func (c *Creator) StreamCreateRoutinesInvoker(qw422016 *qt422016.Writer, r *psql.Routine, name string) {
//line database_tpl.qtpl:337
	camelName := strcase.ToCamel(name)
	args := make([]any, len(r.Params()))
	sql, _, _ := r.BuildSql(dbEngine.ArgsForSelect(args...))
	typeReturn := ""

//line database_tpl.qtpl:342
	if r.Type == psql.ROUTINE_TYPE_PROC {
//line database_tpl.qtpl:342
		qw422016.N().S(`// `)
//line database_tpl.qtpl:343
		qw422016.E().S(camelName)
//line database_tpl.qtpl:343
		qw422016.N().S(` call procedure '`)
//line database_tpl.qtpl:343
		qw422016.E().S(name)
//line database_tpl.qtpl:343
		qw422016.N().S(`'
// DB comment: '`)
//line database_tpl.qtpl:344
		qw422016.E().S(r.Comment)
//line database_tpl.qtpl:344
		qw422016.N().S(`'
func (d *Database) `)
//line database_tpl.qtpl:345
		qw422016.E().S(camelName)
//line database_tpl.qtpl:345
		qw422016.N().S(`(ctx context.Context,
				`)
//line database_tpl.qtpl:346
		c.streamparamsTitle(qw422016, r)
//line database_tpl.qtpl:346
		qw422016.N().S(`
) error {
	return d.Conn.ExecDDL(ctx,
				`)
//line database_tpl.qtpl:346
		qw422016.N().S("`")
//line database_tpl.qtpl:349
		qw422016.E().S(sql)
//line database_tpl.qtpl:349
		qw422016.N().S(``)
//line database_tpl.qtpl:349
		qw422016.N().S("`")
//line database_tpl.qtpl:349
		qw422016.N().S(`,
				`)
//line database_tpl.qtpl:350
		c.streamparamsArgs(qw422016, r)
//line database_tpl.qtpl:350
		qw422016.N().S(`
			)
}
`)
//line database_tpl.qtpl:353
	} else {
//line database_tpl.qtpl:354
		switch len(r.Columns()) {
//line database_tpl.qtpl:355
		case 0:
//line database_tpl.qtpl:356
			typeReturn = c.udtToReturnType(r.UdtName)

//line database_tpl.qtpl:357
		case 1:
//line database_tpl.qtpl:359
			param := r.Columns()[0]
			typeReturn, _ = c.chkTypes(param, strcase.ToCamel(param.Name()))

//line database_tpl.qtpl:362
		default:
//line database_tpl.qtpl:363
			typeReturn = fmt.Sprintf("*%sRowScanner", camelName)

//line database_tpl.qtpl:364
			c.StreamCreateRowScanner(qw422016, r, camelName)
//line database_tpl.qtpl:364
			qw422016.N().S(`
`)
//line database_tpl.qtpl:365
		}
//line database_tpl.qtpl:365
		qw422016.N().S(`// `)
//line database_tpl.qtpl:366
		qw422016.E().S(camelName)
//line database_tpl.qtpl:366
		qw422016.N().S(` run query with select DB function '`)
//line database_tpl.qtpl:366
		qw422016.E().S(name)
//line database_tpl.qtpl:366
		qw422016.N().S(`: `)
//line database_tpl.qtpl:366
		qw422016.E().S(r.UdtName)
//line database_tpl.qtpl:366
		qw422016.N().S(`'
// DB comment: '`)
//line database_tpl.qtpl:367
		qw422016.E().S(r.Comment)
//line database_tpl.qtpl:367
		qw422016.N().S(`'
// ATTENTION! It returns only 1 row `)
//line database_tpl.qtpl:368
		qw422016.E().S(typeReturn)
//line database_tpl.qtpl:368
		qw422016.N().S(`
func (d *Database) `)
//line database_tpl.qtpl:369
		qw422016.E().S(camelName)
//line database_tpl.qtpl:369
		qw422016.N().S(`(
	ctx context.Context,
`)
//line database_tpl.qtpl:371
		c.streamparamsTitle(qw422016, r)
//line database_tpl.qtpl:371
		qw422016.N().S(`) (res `)
//line database_tpl.qtpl:371
		qw422016.E().S(typeReturn)
//line database_tpl.qtpl:371
		qw422016.N().S(`, err error) {
	err = d.Conn.SelectOneAndScan(ctx,
		&res,
		`)
//line database_tpl.qtpl:371
		qw422016.N().S("`")
//line database_tpl.qtpl:374
		qw422016.E().S(sql)
//line database_tpl.qtpl:374
		qw422016.N().S(`
		FETCH FIRST 1 ROW ONLY`)
//line database_tpl.qtpl:374
		qw422016.N().S("`")
//line database_tpl.qtpl:374
		qw422016.N().S(`,
		`)
//line database_tpl.qtpl:376
		c.streamparamsArgs(qw422016, r)
//line database_tpl.qtpl:376
		qw422016.N().S(`      )

	return
}
`)
//line database_tpl.qtpl:380
		if r.ReturnType() == "record" {
//line database_tpl.qtpl:381
			typeReturn = fmt.Sprintf("%sRowScanner", camelName)

//line database_tpl.qtpl:381
			qw422016.N().S(`// `)
//line database_tpl.qtpl:382
			qw422016.E().S(camelName)
//line database_tpl.qtpl:382
			qw422016.N().S(`Each run query with select DB function '`)
//line database_tpl.qtpl:382
			qw422016.E().S(name)
//line database_tpl.qtpl:382
			qw422016.N().S(`'
// DB comment: '`)
//line database_tpl.qtpl:383
			qw422016.E().S(r.Comment)
//line database_tpl.qtpl:383
			qw422016.N().S(`'
// each will get every row from &`)
//line database_tpl.qtpl:384
			qw422016.E().S(camelName)
//line database_tpl.qtpl:384
			qw422016.N().S(`sRowScanner
func (d *Database) `)
//line database_tpl.qtpl:385
			qw422016.E().S(camelName)
//line database_tpl.qtpl:385
			qw422016.N().S(`Each(
	ctx context.Context,
	each func(record *`)
//line database_tpl.qtpl:387
			qw422016.E().S(typeReturn)
//line database_tpl.qtpl:387
			qw422016.N().S(`) error,
`)
//line database_tpl.qtpl:388
			c.streamparamsTitle(qw422016, r)
//line database_tpl.qtpl:388
			qw422016.N().S(`) error {
	res := &`)
//line database_tpl.qtpl:389
			qw422016.E().S(typeReturn)
//line database_tpl.qtpl:389
			qw422016.N().S(`{}
	err := d.Conn.SelectAndScanEach(ctx,
		func () error {
			defer func () {
			//	create new record
				*res = `)
//line database_tpl.qtpl:394
			qw422016.E().S(typeReturn)
//line database_tpl.qtpl:394
			qw422016.N().S(`{}
			}()

			if each != nil {
				return each(res)
			}
			return nil
		},
		res,
		`)
//line database_tpl.qtpl:394
			qw422016.N().S("`")
//line database_tpl.qtpl:403
			qw422016.E().S(sql)
//line database_tpl.qtpl:403
			qw422016.N().S(``)
//line database_tpl.qtpl:403
			qw422016.N().S("`")
//line database_tpl.qtpl:403
			qw422016.N().S(`,
`)
//line database_tpl.qtpl:404
			c.streamparamsArgs(qw422016, r)
//line database_tpl.qtpl:404
			qw422016.N().S(`      )

	return err
}
// `)
//line database_tpl.qtpl:408
			qw422016.E().S(camelName)
//line database_tpl.qtpl:408
			qw422016.N().S(`All run query with select DB function '`)
//line database_tpl.qtpl:408
			qw422016.E().S(name)
//line database_tpl.qtpl:408
			qw422016.N().S(`'
// DB comment: '`)
//line database_tpl.qtpl:409
			qw422016.E().S(r.Comment)
//line database_tpl.qtpl:409
			qw422016.N().S(`'
// each will get every row from &`)
//line database_tpl.qtpl:410
			qw422016.E().S(camelName)
//line database_tpl.qtpl:410
			qw422016.N().S(`sRowScanner
func (d *Database) `)
//line database_tpl.qtpl:411
			qw422016.E().S(camelName)
//line database_tpl.qtpl:411
			qw422016.N().S(`All(
	ctx context.Context,
`)
//line database_tpl.qtpl:413
			c.streamparamsTitle(qw422016, r)
//line database_tpl.qtpl:413
			qw422016.N().S(`) (res []`)
//line database_tpl.qtpl:413
			qw422016.E().S(typeReturn)
//line database_tpl.qtpl:413
			qw422016.N().S(`, err error) {
	buf := `)
//line database_tpl.qtpl:414
			qw422016.E().S(typeReturn)
//line database_tpl.qtpl:414
			qw422016.N().S(`{}
	err = d.Conn.SelectAndScanEach(ctx,
		func () error {
			res = append(res, buf)
			//	create new record
			buf = `)
//line database_tpl.qtpl:419
			qw422016.E().S(typeReturn)
//line database_tpl.qtpl:419
			qw422016.N().S(`{}

			return nil
		},
		&buf,
		`)
//line database_tpl.qtpl:419
			qw422016.N().S("`")
//line database_tpl.qtpl:424
			qw422016.E().S(sql)
//line database_tpl.qtpl:424
			qw422016.N().S(``)
//line database_tpl.qtpl:424
			qw422016.N().S("`")
//line database_tpl.qtpl:424
			qw422016.N().S(`,
`)
//line database_tpl.qtpl:425
			c.streamparamsArgs(qw422016, r)
//line database_tpl.qtpl:425
			qw422016.N().S(`      )

	return
}
`)
//line database_tpl.qtpl:429
		}
//line database_tpl.qtpl:429
		qw422016.N().S(`

`)
//line database_tpl.qtpl:431
	}
//line database_tpl.qtpl:431
	qw422016.N().S(`
`)
//line database_tpl.qtpl:432
}

//line database_tpl.qtpl:432
func (c *Creator) WriteCreateRoutinesInvoker(qq422016 qtio422016.Writer, r *psql.Routine, name string) {
//line database_tpl.qtpl:432
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:432
	c.StreamCreateRoutinesInvoker(qw422016, r, name)
//line database_tpl.qtpl:432
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:432
}

//line database_tpl.qtpl:432
func (c *Creator) CreateRoutinesInvoker(r *psql.Routine, name string) string {
//line database_tpl.qtpl:432
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:432
	c.WriteCreateRoutinesInvoker(qb422016, r, name)
//line database_tpl.qtpl:432
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:432
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:432
	return qs422016
//line database_tpl.qtpl:432
}

//line database_tpl.qtpl:434
func (c *Creator) StreamCreateRowScanner(qw422016 *qt422016.Writer, r *psql.Routine, camelName string) {
//line database_tpl.qtpl:434
	qw422016.N().S(`// `)
//line database_tpl.qtpl:435
	qw422016.E().S(camelName)
//line database_tpl.qtpl:435
	qw422016.N().S(`RowScanner run query with select
type `)
//line database_tpl.qtpl:436
	qw422016.E().S(camelName)
//line database_tpl.qtpl:436
	qw422016.N().S(`RowScanner struct {
`)
//line database_tpl.qtpl:437
	for _, param := range r.Columns() {
//line database_tpl.qtpl:439
		s := strcase.ToCamel(param.Name())
		typeCol, _ := c.chkTypes(param, s)

//line database_tpl.qtpl:441
		qw422016.N().S(`	`)
//line database_tpl.qtpl:442
		qw422016.E().S(s)
//line database_tpl.qtpl:442
		qw422016.E().S("\t\t")
//line database_tpl.qtpl:442
		qw422016.E().S(typeCol)
//line database_tpl.qtpl:442
		qw422016.E().S("\t\t")
//line database_tpl.qtpl:442
		qw422016.N().S(``)
//line database_tpl.qtpl:442
		qw422016.N().S("`")
//line database_tpl.qtpl:442
		qw422016.N().S(`json:"`)
//line database_tpl.qtpl:442
		qw422016.E().S(param.Name())
//line database_tpl.qtpl:442
		qw422016.N().S(`"`)
//line database_tpl.qtpl:442
		qw422016.N().S("`")
//line database_tpl.qtpl:442
		qw422016.N().S(`
`)
//line database_tpl.qtpl:443
	}
//line database_tpl.qtpl:443
	qw422016.N().S(`}
// GetFields implement dbEngine.RowScanner interface
func (r *`)
//line database_tpl.qtpl:446
	qw422016.E().S(camelName)
//line database_tpl.qtpl:446
	qw422016.N().S(`RowScanner) GetFields(columns []dbEngine.Column) []any {
	v := make([]any, len(columns))
	for i, col := range columns {
		switch col.Name() {
`)
//line database_tpl.qtpl:450
	for _, param := range r.Columns() {
//line database_tpl.qtpl:450
		qw422016.N().S(`		case "`)
//line database_tpl.qtpl:451
		qw422016.E().S(param.Name())
//line database_tpl.qtpl:451
		qw422016.N().S(`":
			v[i] =  &r.`)
//line database_tpl.qtpl:452
		qw422016.N().S(strcase.ToCamel(param.Name()))
//line database_tpl.qtpl:452
		qw422016.N().S(`
`)
//line database_tpl.qtpl:453
	}
//line database_tpl.qtpl:453
	qw422016.N().S(`		}
	}

	return v
}
`)
//line database_tpl.qtpl:459
}

//line database_tpl.qtpl:459
func (c *Creator) WriteCreateRowScanner(qq422016 qtio422016.Writer, r *psql.Routine, camelName string) {
//line database_tpl.qtpl:459
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:459
	c.StreamCreateRowScanner(qw422016, r, camelName)
//line database_tpl.qtpl:459
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:459
}

//line database_tpl.qtpl:459
func (c *Creator) CreateRowScanner(r *psql.Routine, camelName string) string {
//line database_tpl.qtpl:459
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:459
	c.WriteCreateRowScanner(qb422016, r, camelName)
//line database_tpl.qtpl:459
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:459
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:459
	return qs422016
//line database_tpl.qtpl:459
}

//line database_tpl.qtpl:461
func (c *Creator) streamparamsTitle(qw422016 *qt422016.Writer, r *psql.Routine) {
//line database_tpl.qtpl:462
	for _, param := range r.Params() {
//line database_tpl.qtpl:464
		s := strcase.ToLowerCamel(param.Name())
		typeCol, _ := c.chkTypes(param, s)

//line database_tpl.qtpl:466
		qw422016.N().S(`	`)
//line database_tpl.qtpl:467
		qw422016.E().S(s)
//line database_tpl.qtpl:467
		qw422016.E().S("\t\t")
//line database_tpl.qtpl:467
		qw422016.E().S(typeCol)
//line database_tpl.qtpl:467
		qw422016.N().S(`,
`)
//line database_tpl.qtpl:468
	}
//line database_tpl.qtpl:469
}

//line database_tpl.qtpl:469
func (c *Creator) writeparamsTitle(qq422016 qtio422016.Writer, r *psql.Routine) {
//line database_tpl.qtpl:469
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:469
	c.streamparamsTitle(qw422016, r)
//line database_tpl.qtpl:469
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:469
}

//line database_tpl.qtpl:469
func (c *Creator) paramsTitle(r *psql.Routine) string {
//line database_tpl.qtpl:469
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:469
	c.writeparamsTitle(qb422016, r)
//line database_tpl.qtpl:469
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:469
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:469
	return qs422016
//line database_tpl.qtpl:469
}

//line database_tpl.qtpl:470
func (c *Creator) streamparamsArgs(qw422016 *qt422016.Writer, r *psql.Routine) {
//line database_tpl.qtpl:471
	for _, param := range r.Params() {
//line database_tpl.qtpl:471
		qw422016.N().S(`		`)
//line database_tpl.qtpl:472
		qw422016.E().S(strcase.ToLowerCamel(param.Name()))
//line database_tpl.qtpl:472
		qw422016.N().S(`,
`)
//line database_tpl.qtpl:473
	}
//line database_tpl.qtpl:474
}

//line database_tpl.qtpl:474
func (c *Creator) writeparamsArgs(qq422016 qtio422016.Writer, r *psql.Routine) {
//line database_tpl.qtpl:474
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:474
	c.streamparamsArgs(qw422016, r)
//line database_tpl.qtpl:474
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:474
}

//line database_tpl.qtpl:474
func (c *Creator) paramsArgs(r *psql.Routine) string {
//line database_tpl.qtpl:474
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:474
	c.writeparamsArgs(qb422016, r)
//line database_tpl.qtpl:474
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:474
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:474
	return qs422016
//line database_tpl.qtpl:474
}

//line database_tpl.qtpl:476
func (c *Creator) StreamCreateTableConstructor(qw422016 *qt422016.Writer, cName, name string) {
//line database_tpl.qtpl:476
	qw422016.N().S(`// New`)
//line database_tpl.qtpl:477
	qw422016.E().S(cName)
//line database_tpl.qtpl:477
	qw422016.N().S(` create new instance of table `)
//line database_tpl.qtpl:477
	qw422016.E().S(cName)
//line database_tpl.qtpl:477
	qw422016.N().S(`
func (d *Database) New`)
//line database_tpl.qtpl:478
	qw422016.E().S(cName)
//line database_tpl.qtpl:478
	qw422016.N().S(`(ctx context.Context) (*`)
//line database_tpl.qtpl:478
	qw422016.E().S(cName)
//line database_tpl.qtpl:478
	qw422016.N().S(`, error) {
	const name = "`)
//line database_tpl.qtpl:479
	qw422016.E().S(name)
//line database_tpl.qtpl:479
	qw422016.N().S(`"
	table, ok := d.Tables[name]
    if !ok {
		var err error
		table, err = New`)
//line database_tpl.qtpl:483
	qw422016.E().S(cName)
//line database_tpl.qtpl:483
	qw422016.N().S(`FromConn(ctx, d.PsqlConn())
		if err != nil {
			return nil, err
		}
		d.Tables[name] = table
    }

    return &`)
//line database_tpl.qtpl:490
	qw422016.E().S(cName)
//line database_tpl.qtpl:490
	qw422016.N().S(`{
		Table: table.(*psql.Table),
    }, nil
}
`)
//line database_tpl.qtpl:494
}

//line database_tpl.qtpl:494
func (c *Creator) WriteCreateTableConstructor(qq422016 qtio422016.Writer, cName, name string) {
//line database_tpl.qtpl:494
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:494
	c.StreamCreateTableConstructor(qw422016, cName, name)
//line database_tpl.qtpl:494
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:494
}

//line database_tpl.qtpl:494
func (c *Creator) CreateTableConstructor(cName, name string) string {
//line database_tpl.qtpl:494
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:494
	c.WriteCreateTableConstructor(qb422016, cName, name)
//line database_tpl.qtpl:494
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:494
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:494
	return qs422016
//line database_tpl.qtpl:494
}
