{% import (
	"fmt"
	"github.com/iancoleman/strcase"
	"github.com/ruslanBik4/dbEngine/dbEngine"
)
%}

{% code
type DatabaseTpl struct {
	Types map[string] string
	db         *dbEngine.DB
    Packages   []string
}

func NewDatabaseTpl(db *dbEngine.DB) *DatabaseTpl {
    return &DatabaseTpl{
        Types: make(map[string] string),
        db: db,
    }
} 
%}
{% func (t *DatabaseTpl) CreateDatabase() %}
// Code generated by dbEngine-gen-go. DO NOT EDIT.
// versions:
// 	dbEngine v1.1.6
// source: %s %s
package db

import (
	"fmt"
	"time"
	"strings"
	{%- for _, lib := range t.Packages -%}"{%s lib %}"
    {%- endfor -%}

	"github.com/jackc/pgconn"

	"github.com/ruslanBik4/logs"
	"github.com/ruslanBik4/dbEngine/dbEngine"
    "github.com/ruslanBik4/dbEngine/dbEngine/psql"

	"golang.org/x/net/context"
	"github.com/pkg/errors"
)
{%- for name, typ := range t.db.Types -%}{%= CreateTypeInterface(typ, strcase.ToCamel(name), name, t.Types[name]) %}
{%- endfor -%}

// Database is root interface for operation for %s.%s
type Database struct {
	*dbEngine.DB
	CreateAt time.Time
}

// NewDatabase create new Database with minimal necessary handlers
func NewDatabase(ctx context.Context, noticeHandler pgconn.NoticeHandler, channelHandler pgconn.NotificationHandler, channels ...string) (*Database, error) {
	if noticeHandler == nil {
		noticeHandler = printNotice
	}
	conn := psql.NewConn(nil, nil, noticeHandler, channels...)
	if channelHandler != nil {
		conn.ChannelHandler = channelHandler
	}

	DB, err := dbEngine.NewDB(ctx, conn)
	if err != nil {
		logs.ErrorLog(err, "")
		return nil, err
	}

	return &Database{DB, time.Now()}, nil
}
// PsqlConn return connection as *psql.Conn
// need for some low-level operation,
// invoke Conn.Select...(custom sql),
//        New{table_name}FromConn, etc.
func (d *Database) PsqlConn() *psql.Conn {
	return (d.Conn).(*psql.Conn)
}
{%- for name := range t.db.Tables -%}
{%= t.CreateTableConstructor(strcase.ToCamel(name), name) %}
{%- endfor -%}

{% endfunc %}

{%- func CreateTypeInterface(t dbEngine.Types, cName, name, typeCol string) -%}
// {%s cName %} create new instance of type {%s name %}
type {%s cName %} struct {
{%- for name, tName := range t.Attr -%}
	{%s strcase.ToCamel(name) %}{%s= fmt.Sprintf("\t\t\t%s\t",  tName) %}`json:"{%s name %}"`
{%- endfor -%}
}
{%- endfunc -%}

{%- func (t *DatabaseTpl) CreateTableConstructor(cName, name string) -%}
// New{%s cName %} create new instance of table {%s cName %}
func (d *Database) New{%s cName %}(ctx context.Context) (*{%s cName %}, error) {
	const name = "{%s name %}"
	table, ok := d.Tables[name]
    if !ok {
		var err error
		table, err = New{%s cName %}FromConn(ctx, d.PsqlConn())
		if err != nil {
			return nil, err
		}
		d.Tables[name] = table
    }

    return &{%s cName %}{
		Table: table.(*psql.Table),
    }, nil
}
{% endfunc %}