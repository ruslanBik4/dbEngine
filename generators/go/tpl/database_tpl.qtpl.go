// Code generated by qtc from "database_tpl.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line database_tpl.qtpl:1
package tpl

//line database_tpl.qtpl:1
import (
	"fmt"
	"github.com/iancoleman/strcase"
	"github.com/ruslanBik4/dbEngine/dbEngine"
)

//line database_tpl.qtpl:8
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line database_tpl.qtpl:8
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line database_tpl.qtpl:9
type DatabaseTpl struct {
	Types    map[string]string
	db       *dbEngine.DB
	Packages []string
}

func NewDatabaseTpl(db *dbEngine.DB) *DatabaseTpl {
	return &DatabaseTpl{
		Types: make(map[string]string),
		db:    db,
	}
}

//line database_tpl.qtpl:22
func (t *DatabaseTpl) StreamCreateDatabase(qw422016 *qt422016.Writer) {
//line database_tpl.qtpl:22
	qw422016.N().S(`
// Code generated by dbEngine-gen-go. DO NOT EDIT.
// versions:
// 	dbEngine v1.1.6
// source: %s %s
package db

import (
	"fmt"
	"time"
	"strings"
`)
//line database_tpl.qtpl:33
	for _, lib := range t.Packages {
//line database_tpl.qtpl:33
		qw422016.N().S(`"`)
//line database_tpl.qtpl:33
		qw422016.E().S(lib)
//line database_tpl.qtpl:33
		qw422016.N().S(`"
`)
//line database_tpl.qtpl:34
	}
//line database_tpl.qtpl:34
	qw422016.N().S(`
	"github.com/jackc/pgconn"

	"github.com/ruslanBik4/logs"
	"github.com/ruslanBik4/dbEngine/dbEngine"
    "github.com/ruslanBik4/dbEngine/dbEngine/psql"

	"golang.org/x/net/context"
	"github.com/pkg/errors"
)
`)
//line database_tpl.qtpl:45
	for name, typ := range t.db.Types {
//line database_tpl.qtpl:45
		StreamCreateTypeInterface(qw422016, typ, strcase.ToCamel(name), name, t.Types[name])
//line database_tpl.qtpl:45
		qw422016.N().S(`
`)
//line database_tpl.qtpl:46
	}
//line database_tpl.qtpl:46
	qw422016.N().S(`
// Database is root interface for operation for %s.%s
type Database struct {
	*dbEngine.DB
	CreateAt time.Time
}

// NewDatabase create new Database with minimal necessary handlers
func NewDatabase(ctx context.Context, noticeHandler pgconn.NoticeHandler, channelHandler pgconn.NotificationHandler, channels ...string) (*Database, error) {
	if noticeHandler == nil {
		noticeHandler = printNotice
	}
	conn := psql.NewConn(nil, nil, noticeHandler, channels...)
	if channelHandler != nil {
		conn.ChannelHandler = channelHandler
	}

	DB, err := dbEngine.NewDB(ctx, conn)
	if err != nil {
		logs.ErrorLog(err, "")
		return nil, err
	}

	return &Database{DB, time.Now()}, nil
}
// PsqlConn return connection as *psql.Conn
// need for some low-level operation,
// invoke Conn.Select...(custom sql),
//        New{table_name}FromConn, etc.
func (d *Database) PsqlConn() *psql.Conn {
	return (d.Conn).(*psql.Conn)
}
`)
//line database_tpl.qtpl:79
	for name := range t.db.Tables {
//line database_tpl.qtpl:80
		t.StreamCreateTableConstructor(qw422016, strcase.ToCamel(name), name)
//line database_tpl.qtpl:80
		qw422016.N().S(`
`)
//line database_tpl.qtpl:81
	}
//line database_tpl.qtpl:81
	qw422016.N().S(`
`)
//line database_tpl.qtpl:83
}

//line database_tpl.qtpl:83
func (t *DatabaseTpl) WriteCreateDatabase(qq422016 qtio422016.Writer) {
//line database_tpl.qtpl:83
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:83
	t.StreamCreateDatabase(qw422016)
//line database_tpl.qtpl:83
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:83
}

//line database_tpl.qtpl:83
func (t *DatabaseTpl) CreateDatabase() string {
//line database_tpl.qtpl:83
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:83
	t.WriteCreateDatabase(qb422016)
//line database_tpl.qtpl:83
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:83
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:83
	return qs422016
//line database_tpl.qtpl:83
}

//line database_tpl.qtpl:85
func StreamCreateTypeInterface(qw422016 *qt422016.Writer, t dbEngine.Types, cName, name, typeCol string) {
//line database_tpl.qtpl:85
	qw422016.N().S(`// `)
//line database_tpl.qtpl:86
	qw422016.E().S(cName)
//line database_tpl.qtpl:86
	qw422016.N().S(` create new instance of type `)
//line database_tpl.qtpl:86
	qw422016.E().S(name)
//line database_tpl.qtpl:86
	qw422016.N().S(`
type `)
//line database_tpl.qtpl:87
	qw422016.E().S(cName)
//line database_tpl.qtpl:87
	qw422016.N().S(` struct {
`)
//line database_tpl.qtpl:88
	for name, tName := range t.Attr {
//line database_tpl.qtpl:88
		qw422016.N().S(`	`)
//line database_tpl.qtpl:89
		qw422016.E().S(strcase.ToCamel(name))
//line database_tpl.qtpl:89
		qw422016.N().S(fmt.Sprintf("\t\t\t%s\t", tName))
//line database_tpl.qtpl:89
		qw422016.N().S(``)
//line database_tpl.qtpl:89
		qw422016.N().S("`")
//line database_tpl.qtpl:89
		qw422016.N().S(`json:"`)
//line database_tpl.qtpl:89
		qw422016.E().S(name)
//line database_tpl.qtpl:89
		qw422016.N().S(`"`)
//line database_tpl.qtpl:89
		qw422016.N().S("`")
//line database_tpl.qtpl:89
		qw422016.N().S(`
`)
//line database_tpl.qtpl:90
	}
//line database_tpl.qtpl:90
	qw422016.N().S(`}
`)
//line database_tpl.qtpl:92
}

//line database_tpl.qtpl:92
func WriteCreateTypeInterface(qq422016 qtio422016.Writer, t dbEngine.Types, cName, name, typeCol string) {
//line database_tpl.qtpl:92
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:92
	StreamCreateTypeInterface(qw422016, t, cName, name, typeCol)
//line database_tpl.qtpl:92
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:92
}

//line database_tpl.qtpl:92
func CreateTypeInterface(t dbEngine.Types, cName, name, typeCol string) string {
//line database_tpl.qtpl:92
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:92
	WriteCreateTypeInterface(qb422016, t, cName, name, typeCol)
//line database_tpl.qtpl:92
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:92
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:92
	return qs422016
//line database_tpl.qtpl:92
}

//line database_tpl.qtpl:94
func (t *DatabaseTpl) StreamCreateTableConstructor(qw422016 *qt422016.Writer, cName, name string) {
//line database_tpl.qtpl:94
	qw422016.N().S(`// New`)
//line database_tpl.qtpl:95
	qw422016.E().S(cName)
//line database_tpl.qtpl:95
	qw422016.N().S(` create new instance of table `)
//line database_tpl.qtpl:95
	qw422016.E().S(cName)
//line database_tpl.qtpl:95
	qw422016.N().S(`
func (d *Database) New`)
//line database_tpl.qtpl:96
	qw422016.E().S(cName)
//line database_tpl.qtpl:96
	qw422016.N().S(`(ctx context.Context) (*`)
//line database_tpl.qtpl:96
	qw422016.E().S(cName)
//line database_tpl.qtpl:96
	qw422016.N().S(`, error) {
	const name = "`)
//line database_tpl.qtpl:97
	qw422016.E().S(name)
//line database_tpl.qtpl:97
	qw422016.N().S(`"
	table, ok := d.Tables[name]
    if !ok {
		var err error
		table, err = New`)
//line database_tpl.qtpl:101
	qw422016.E().S(cName)
//line database_tpl.qtpl:101
	qw422016.N().S(`FromConn(ctx, d.PsqlConn())
		if err != nil {
			return nil, err
		}
		d.Tables[name] = table
    }

    return &`)
//line database_tpl.qtpl:108
	qw422016.E().S(cName)
//line database_tpl.qtpl:108
	qw422016.N().S(`{
		Table: table.(*psql.Table),
    }, nil
}
`)
//line database_tpl.qtpl:112
}

//line database_tpl.qtpl:112
func (t *DatabaseTpl) WriteCreateTableConstructor(qq422016 qtio422016.Writer, cName, name string) {
//line database_tpl.qtpl:112
	qw422016 := qt422016.AcquireWriter(qq422016)
//line database_tpl.qtpl:112
	t.StreamCreateTableConstructor(qw422016, cName, name)
//line database_tpl.qtpl:112
	qt422016.ReleaseWriter(qw422016)
//line database_tpl.qtpl:112
}

//line database_tpl.qtpl:112
func (t *DatabaseTpl) CreateTableConstructor(cName, name string) string {
//line database_tpl.qtpl:112
	qb422016 := qt422016.AcquireByteBuffer()
//line database_tpl.qtpl:112
	t.WriteCreateTableConstructor(qb422016, cName, name)
//line database_tpl.qtpl:112
	qs422016 := string(qb422016.B)
//line database_tpl.qtpl:112
	qt422016.ReleaseByteBuffer(qb422016)
//line database_tpl.qtpl:112
	return qs422016
//line database_tpl.qtpl:112
}
