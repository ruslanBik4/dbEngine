// Code generated by qtc from "column_type.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line column_type.qtpl:1
package _go

//line column_type.qtpl:2
import (
	"github.com/iancoleman/strcase"
	"github.com/ruslanBik4/dbEngine/dbEngine"
)

//line column_type.qtpl:8
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line column_type.qtpl:8
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line column_type.qtpl:9
type ColumnType struct {
	name    string
	sName   string
	columns []dbEngine.Column
}

func NewColumnType(name, sName string, columns []dbEngine.Column) *ColumnType {
	return &ColumnType{
		name:    name,
		sName:   sName,
		columns: columns,
	}
}

//line column_type.qtpl:23
func (c *ColumnType) StreamColumnType(qw422016 *qt422016.Writer) {
//line column_type.qtpl:23
	qw422016.N().S(`
// `)
//line column_type.qtpl:24
	qw422016.E().S(c.name)
//line column_type.qtpl:24
	qw422016.N().S(`PsqlType interface for reading data from psql connection
type (
	`)
//line column_type.qtpl:26
	qw422016.E().S(c.name)
//line column_type.qtpl:26
	qw422016.N().S(`PsqlType struct {
		`)
//line column_type.qtpl:27
	qw422016.E().S(c.name)
//line column_type.qtpl:27
	qw422016.N().S(`Fields
		Status      pgtype.Status 
		convertErrs []string
	}
)

// GetFields implement dbEngine.RowScanner interface
func (r *`)
//line column_type.qtpl:34
	qw422016.E().S(c.name)
//line column_type.qtpl:34
	qw422016.N().S(`PsqlType) GetFields(columns []dbEngine.Column) []any {
	v := make([]any, len(columns))
	for i, col := range columns {
		switch name:= col.Name(); name {
		case "`)
//line column_type.qtpl:38
	qw422016.E().S(c.sName)
//line column_type.qtpl:38
	qw422016.N().S(`":
			v[i] = r
		default:
			v[i] = r.RefColValue(name)
		}
	}

	return v
}
// Set implement pgtype.Value interface
func (dst *`)
//line column_type.qtpl:48
	qw422016.E().S(c.name)
//line column_type.qtpl:48
	qw422016.N().S(`PsqlType) Set(src any) error {
	switch value := src.(type) {
	// untyped nil and typed nil interfaces are different
	case nil:
		*dst = `)
//line column_type.qtpl:52
	qw422016.E().S(c.name)
//line column_type.qtpl:52
	qw422016.N().S(`PsqlType{Status: pgtype.Null}
		return nil
	case `)
//line column_type.qtpl:54
	qw422016.E().S(c.name)
//line column_type.qtpl:54
	qw422016.N().S(`PsqlType:
		*dst = `)
//line column_type.qtpl:55
	qw422016.E().S(c.name)
//line column_type.qtpl:55
	qw422016.N().S(`PsqlType{
			`)
//line column_type.qtpl:56
	qw422016.E().S(c.name)
//line column_type.qtpl:56
	qw422016.N().S(`Fields: value.`)
//line column_type.qtpl:56
	qw422016.E().S(c.name)
//line column_type.qtpl:56
	qw422016.N().S(`Fields,
			Status:          pgtype.Present,
		}
		return nil

	default:
		return nil
	}
}
// Get implement pgtype.Value interface
func (dst *`)
//line column_type.qtpl:66
	qw422016.E().S(c.name)
//line column_type.qtpl:66
	qw422016.N().S(`PsqlType) Get() any {
	switch dst.Status {
	case pgtype.Present:
		return *dst
	case pgtype.Null:
		return nil
	default:
		return dst.Status
	}
}
// AssignTo implement pgtype.Value interface
func (src *`)
//line column_type.qtpl:77
	qw422016.E().S(c.name)
//line column_type.qtpl:77
	qw422016.N().S(`PsqlType) AssignTo(dst any) error {
	switch src.Status {
	case pgtype.Present:
		switch v := dst.(type) {
		case *`)
//line column_type.qtpl:81
	qw422016.E().S(c.name)
//line column_type.qtpl:81
	qw422016.N().S(`PsqlType:
			(*v).`)
//line column_type.qtpl:82
	qw422016.E().S(c.name)
//line column_type.qtpl:82
	qw422016.N().S(`Fields = src.`)
//line column_type.qtpl:82
	qw422016.E().S(c.name)
//line column_type.qtpl:82
	qw422016.N().S(`Fields
			return nil

		default:
			if nextDst, retry := pgtype.GetAssignToDstType(dst); retry {
				return src.AssignTo(nextDst)
			}
		}
		return nil

	case pgtype.Null:
		return pgtype.NullAssignTo(dst)

	default:
		return fmt.Errorf("cannot decode %v into %T", src, dst)
	}
}
// DecodeText implement pgtype.TextDecoder interface
func (dst *`)
//line column_type.qtpl:100
	qw422016.E().S(c.name)
//line column_type.qtpl:100
	qw422016.N().S(`PsqlType) DecodeText(ci *pgtype.ConnInfo, src []byte) error {
	*dst = `)
//line column_type.qtpl:101
	qw422016.E().S(c.name)
//line column_type.qtpl:101
	qw422016.N().S(`PsqlType{Status: pgtype.Null}
	if len(src) == 0 {
		return nil
	}

	c := pgtype.NewCompositeTextScanner(ci, src)

	return dst.scanAll(c)
}
// DecodeBinary implement pgtype.DecodeBinary interface
func (dst *`)
//line column_type.qtpl:111
	qw422016.E().S(c.name)
//line column_type.qtpl:111
	qw422016.N().S(`PsqlType) DecodeBinary(ci *pgtype.ConnInfo, src []byte) (err error) {
	*dst = `)
//line column_type.qtpl:112
	qw422016.E().S(c.name)
//line column_type.qtpl:112
	qw422016.N().S(`PsqlType{Status: pgtype.Null}
	if len(src) == 0 {
		return nil
	}

	c := pgtype.NewCompositeBinaryScanner(ci, src)

	if err := dst.scanAll(c); err != nil {
		dst.Status = pgtype.Undefined
		return err
	}
	dst.Status = pgtype.Present

	return nil
}

func (dst *`)
//line column_type.qtpl:128
	qw422016.E().S(c.name)
//line column_type.qtpl:128
	qw422016.N().S(`Fields) scanAll(c scanError) error {
`)
//line column_type.qtpl:129
	for _, col := range c.columns {
//line column_type.qtpl:129
		qw422016.N().S(`	c.ScanValue(&dst.`)
//line column_type.qtpl:130
		qw422016.E().S(strcase.ToCamel(col.Name()))
//line column_type.qtpl:130
		qw422016.N().S(`)
	if err := c.Err(); err != nil {
		logs.ErrorLog(err, "`)
//line column_type.qtpl:132
		qw422016.E().S(col.Name())
//line column_type.qtpl:132
		qw422016.N().S(`")
		return err
	}
`)
//line column_type.qtpl:135
	}
//line column_type.qtpl:135
	qw422016.N().S(`
	return nil
}

// New implement ValueDecoder[T any] interface
func (dst *`)
//line column_type.qtpl:141
	qw422016.E().S(c.name)
//line column_type.qtpl:141
	qw422016.N().S(`Fields) New() *`)
//line column_type.qtpl:141
	qw422016.E().S(c.name)
//line column_type.qtpl:141
	qw422016.N().S(`Fields{
	return &`)
//line column_type.qtpl:142
	qw422016.E().S(c.name)
//line column_type.qtpl:142
	qw422016.N().S(`Fields{}
}

// DecodeText implement pgtype.TextDecoder interface
func (dst *`)
//line column_type.qtpl:146
	qw422016.E().S(c.name)
//line column_type.qtpl:146
	qw422016.N().S(`Fields) DecodeText(ci *pgtype.ConnInfo, src []byte) error {
	*dst = `)
//line column_type.qtpl:147
	qw422016.E().S(c.name)
//line column_type.qtpl:147
	qw422016.N().S(`Fields{}
	c := pgtype.NewCompositeTextScanner(ci, src)

	return dst.scanAll(c)
}

// DecodeText implement pgtype.TextDecoder interface
func (dst *`)
//line column_type.qtpl:154
	qw422016.E().S(c.name)
//line column_type.qtpl:154
	qw422016.N().S(`Fields) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	*dst = `)
//line column_type.qtpl:155
	qw422016.E().S(c.name)
//line column_type.qtpl:155
	qw422016.N().S(`Fields{}
	c := pgtype.NewCompositeBinaryScanner(ci, src)

	return dst.scanAll(c)
}
`)
//line column_type.qtpl:160
}

//line column_type.qtpl:160
func (c *ColumnType) WriteColumnType(qq422016 qtio422016.Writer) {
//line column_type.qtpl:160
	qw422016 := qt422016.AcquireWriter(qq422016)
//line column_type.qtpl:160
	c.StreamColumnType(qw422016)
//line column_type.qtpl:160
	qt422016.ReleaseWriter(qw422016)
//line column_type.qtpl:160
}

//line column_type.qtpl:160
func (c *ColumnType) ColumnType() string {
//line column_type.qtpl:160
	qb422016 := qt422016.AcquireByteBuffer()
//line column_type.qtpl:160
	c.WriteColumnType(qb422016)
//line column_type.qtpl:160
	qs422016 := string(qb422016.B)
//line column_type.qtpl:160
	qt422016.ReleaseByteBuffer(qb422016)
//line column_type.qtpl:160
	return qs422016
//line column_type.qtpl:160
}
