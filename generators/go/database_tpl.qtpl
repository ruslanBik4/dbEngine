{% package _go %}
{% import (
	"fmt"
	"strings"
	"slices"

	"github.com/iancoleman/strcase"
	"github.com/ruslanBik4/dbEngine/dbEngine"
    "github.com/ruslanBik4/dbEngine/dbEngine/psql"
)
%}

{%- func (c *Creator) CreateDatabase(packages, listRoutines []string) -%}
// Code generated by dbEngine-gen-go. DO NOT EDIT!
// Copyright https://github.com/ruslanBik4

/*
	Package db

DB implements interface for table, view and routines of Database
versions:

 	dbEngine v1.1.6

source: %s %s
*/
package db

import (
	{%- for _, lib := range packages -%}
	"{%s lib %}"
    {%- endfor -%}
)

type scanError interface {
	ScanValue(d any)
	Err() error
}

// ValueDecoder is a value that implements the text and binary encoding and decoding interfaces.
type ValueDecoder[T any] interface {
	pgtype.TextDecoder
	pgtype.BinaryDecoder
	New() T
}

type WrapArray[T ValueDecoder[T]] []T

func (dst *WrapArray[T]) DecodeText(ci *pgtype.ConnInfo, src []byte) (err error) {
	if len(src) == 0 {
		return nil
	}

	arr, err := pgtype.ParseUntypedTextArray(gotools.BytesToString(src))
	if err != nil {
		return err
	}

	if len(arr.Elements) == 0 {
		return nil
	}

	buf := make([]T, len(arr.Elements))
	for i, el := range arr.Elements {
		buf[i] = T.New(buf[i])
		if err := buf[i].DecodeText(ci, gotools.StringToBytes(el)); err != nil {
			return err
		}
	}

	*dst = buf

	return nil
}

func (dst *WrapArray[T]) DecodeBinary(ci *pgtype.ConnInfo, src []byte) (err error) {
	if len(src) == 0 {
		return nil
	}

	arr, err := pgtype.ParseUntypedTextArray(gotools.BytesToString(src))
	if err != nil {
		return err
	}

	if len(arr.Elements) == 0 {
		return nil
	}

	buf := make([]T, len(arr.Elements))
	for i, el := range arr.Elements {
		buf[i] = T.New(buf[i])
		if err := buf[i].DecodeBinary(ci, gotools.StringToBytes(el)); err != nil {
			return err
		}
	}

	*dst = buf

	return nil
}
{% code hasCitext := false %}

{%- for _, name := range c.types -%}
{%- if name != "citext" -%}{%= c.CreateTypeInterface(c.DB.Types[name], strcase.ToCamel(name), name, c.Types[name]) %}
{% else %}
type CitextArray struct {
	pgtype.TextArray
}

func (dst CitextArray) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBufferString("[")
	for i, text := range dst.Elements {
		if i > 0 {
			buf.WriteString(",")
		}

		buf.WriteString(text.String)
	}

	buf.WriteString("]")

	return buf.Bytes(), nil
}

var customTypes = map[string]*pgtype.DataType{
	"citext": {
		Value: &pgtype.Text{},
		Name:  "citext",
	},
	"_citext": {
		Value: &pgtype.TextArray{},
		Name:  "[]string",
	},
}

var initCustomTypes bool

const sqlGetTypes = "SELECT typname, oid FROM pg_type WHERE typname::text=ANY($1)"

func getOidCustomTypes(ctx context.Context, conn *pgx.Conn) error {
	params := make([]string, 0, len(customTypes))
	for name := range customTypes {
		params = append(params, name)
	}

	rows, err := conn.Query(ctx, sqlGetTypes, params)
	if err != nil {
		return err
	}

	for rows.Next() {
		var name string
		var oid uint32
		err = rows.Scan(&name, &oid)
		if err != nil {
			return err
		}
		if c, ok := customTypes[name]; ok && c.Value == (*pgtype.ArrayType)(nil) {
			c.Value = pgtype.NewArrayType(name, oid, func() pgtype.ValueTranscoder {
				return &pgtype.Text{}
			}).NewTypeValue()
			c.OID = oid
			logs.DebugLog(c)
		} else if ok {
			customTypes[name].OID = oid
		}
	}

	if rows.Err() != nil {
		logs.ErrorLog(rows.Err(), " cannot get oid for customTypes")
	}

	return err
}

// afterConnect create need types & register on conn
func afterConnect(ctx context.Context, conn *pgx.Conn) error {
	// Override registered handler for point
	if !initCustomTypes {
		err := getOidCustomTypes(ctx, conn)
		if err != nil {
			return err
		}

		initCustomTypes = true
	}

	mess := "DB registered type (name, oid): "
	for name, val := range customTypes {
		conn.ConnInfo().RegisterDataType(*val)
		mess += fmt.Sprintf("\n(%s,%v, %T) ", name, val.OID, val.Value)
	}

	logs.StatusLog(conn.PgConn().Conn().LocalAddr().String(), mess)

	return nil
}
{% code hasCitext = true %}
{% endif %}
{%- endfor -%}
// Database is root interface for operation for %s.%s
type Database struct {
	*dbEngine.DB
	CreateAt time.Time
}

// NewDatabase create new Database with minimal necessary handlers
func NewDatabase(ctx context.Context, noticeHandler pgconn.NoticeHandler, channelHandler pgconn.NotificationHandler, channels ...string) (*Database, error) {
	if noticeHandler == nil {
		noticeHandler = printNotice
	}
	conn := psql.NewConnWithOptions(
		{%- if hasCitext -%}psql.AfterConnect(afterConnect),{%- endif -%}
		psql.NoticeHandler(noticeHandler),
		psql.ChannelHandler(channelHandler),
		psql.Channels(channels...),
	)

	DB, err := dbEngine.NewDB(ctx, conn)
	if err != nil {
		logs.ErrorLog(err, "new DB")
		return nil, err
	}

	return &Database{DB, time.Now()}, nil
}

func (DB *Database) Notify(ctx context.Context, ch, mess string) string {
	res := ""
	err := DB.Conn.SelectOneAndScan(ctx, &res, "SELECT pg_notify($1,$2)::varchar", ch, mess)
	if err != nil {
		logs.ErrorLog(err, "SELECT pg_notify(%s, %s)", ch, mess)
	} else {
		logs.DebugLog("send notify '%s' in channel '%s': %s", mess, ch, res)
	}

	return res
}

// PsqlConn return connection as *psql.Conn
// need for some low-level operation,
// invoke Conn.Select...(custom sql),
//        New{table_name}FromConn, etc.
func (d *Database) PsqlConn() *psql.Conn {
	return (d.Conn).(*psql.Conn)
}
{%- for name := range c.Tables -%}{%= c.CreateTableConstructor(strcase.ToCamel(name), name) %}{%- endfor -%}
{%- for _, name := range listRoutines -%}{%= c.CreateRoutinesInvoker(c.Routines[name].(*psql.Routine), name) %}{%- endfor -%}
// printNotice logging some psql messages (invoked command 'RAISE ...')
func printNotice(c *pgconn.PgConn, n *pgconn.Notice) {
	switch {
    case n.Code == "42P07" || strings.Contains(n.Message, "skipping"):
		logs.DebugLog("skip operation: %s", n.Message)

	case n.Severity == "INFO":
		logs.StatusLog(n.Message)

	case n.Code > "00000":
		err := (*pgconn.PgError)(n)
				logs.CustomLog(logs.CRITICAL,
				"DB_EXEC",
				err.File,
				int(err.Line),
				fmt.Sprintf("%v, hint: %s, where: %s, %s %s", err, n.Hint, gotools.StartEndString(n.Where, 100), err.SQLState(), err.Routine),
				logs.FgErr)

	case strings.HasPrefix(n.Message, "[[ERROR]]"):
		logs.ErrorLog(errors.New(strings.TrimPrefix(n.Message, "[[ERROR]]") + n.Severity))

	default: // DEBUG
		logs.DebugLog("%+v %s (PID:%d)", n.Severity, n.Message, c.PID())
	}
}
{% endfunc %}

{%- func (c *Creator) CreateTypeInterface(t dbEngine.Types, typeName, name, typeCol string) -%}
{%- if len(t.Enumerates) == 0 && len(t.Attr) > 0 && t.Attr[0].Name != "domain" -%}
// {%s typeName %} create new instance of type {%s name %}
type {%s typeName %} struct {
    {% code
       maxName := len(slices.MaxFunc(t.Attr, func(a, b dbEngine.TypesAttr) int {
                                         		return len(a.Name) - len(b.Name)
                                         	}).Name)
       maxType := len(slices.MaxFunc(t.Attr, func(a, b dbEngine.TypesAttr) int {
                                         		return len(a.Type) - len(b.Type)
                                         	}).Type)
    %}
	{%- for _, attr := range t.Attr -%}
	{%s= fmt.Sprintf("%-*s\t\t%-*s\t `json:\"%s", maxName,  strcase.ToCamel(attr.Name), maxType, attr.Type, attr.Name) %}{%- if !attr.NotOmited() -%},omitempty{%- endif -%}"`
	{%- endfor -%}
	{%- if t.Type == 'r' -%}
	LowerType pgtype.BoundType
	UpperType pgtype.BoundType
	{%- endif -%}
}

// New implement ValueDecoder[T any] interface
func (dst *{%s typeName %}) New() *{%s typeName %}{
	return &{%s typeName %}{}
}

// DecodeText implement pgtype.TextDecoder interface
func (dst *{%s typeName %}) DecodeText(ci *pgtype.ConnInfo, src []byte) error {
	*dst = {%s typeName %}{}
	if len(src) == 0 {
		return nil
	}
	{% if t.Type == 'r' %}
	utr, err := pgtype.ParseUntypedTextRange(gotools.BytesToString(src))
	if err != nil {
		return err
	}
	{% else %}
	c := pgtype.NewCompositeTextScanner(ci, src)
	{%- endif -%}

	{%- if t.Type == 'r' -%}
    	dst.LowerType = utr.LowerType
    	dst.UpperType = utr.UpperType

    	if dst.LowerType == pgtype.Empty {
    		return nil
    	}

    	if dst.LowerType == pgtype.Inclusive || dst.LowerType == pgtype.Exclusive {
    		if err := dst.Lower.DecodeText(ci, gotools.StringToBytes(utr.Lower)); err != nil {
    			scanErrors = errors.Join(scanErrors, err)
    		}
    	}

    	if dst.UpperType == pgtype.Inclusive || dst.UpperType == pgtype.Exclusive {
    		if err := dst.Upper.DecodeText(ci, gotools.StringToBytes(utr.Upper)); err != nil {
    			scanErrors = errors.Join(scanErrors, err)
    		}
    	}
	{%- else -%}
	{%- for _, attr := range t.Attr -%}
	{% if strings.HasPrefix(attr.Type, "pgtype.") || strings.HasPrefix(attr.Name, "psql.") %}
	c.ScanDecoder{% else %}c.ScanValue{% endif %}(&dst.{%s strcase.ToCamel(attr.Name) %})
	if c.Err() != nil {
		return c.Err()
	}
	{%- endfor -%}
	{%- endif -%}

	return nil
}

// DecodeBinary implement pgtype.BinaryDecoder interface
func (dst *{%s typeName %}) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	*dst = {%s typeName %}{}
	if len(src) == 0 {
		return nil
	}

	{%- if t.Type == 'r' -%}
	utr, err := pgtype.ParseUntypedBinaryRange(src)
	if err != nil {
		return err
	}
	{%- else -%}
	c := pgtype.NewCompositeBinaryScanner(ci, src)
	countFields := c.FieldCount()
	{%- endif -%}
	{%- if t.Type == 'r' -%}
    	dst.LowerType = utr.LowerType
    	dst.UpperType = utr.UpperType

    	if dst.LowerType == pgtype.Empty {
    		return nil
    	}

    	if dst.LowerType == pgtype.Inclusive || dst.LowerType == pgtype.Exclusive {
    		if err := dst.Lower.DecodeBinary(ci, utr.Lower); err != nil {
    			return err
    		}
    	}

    	if dst.UpperType == pgtype.Inclusive || dst.UpperType == pgtype.Exclusive {
    		if err := dst.Upper.DecodeBinary(ci, utr.Upper); err != nil {
    			return err
    		}
    	}
	{%- else -%}
	{%- for i, attr := range t.Attr -%}
	//	    rich end of elements
	if countFields < {%d i+1 %} || !c.Next() {
		return nil
	}
	if err := {% if strings.HasPrefix(attr.Name, "pgtype.") || strings.HasPrefix(attr.Name, "psql.") -%} &dst.{%s strcase.ToCamel(attr.Name) %}.DecodeBinary(ci, c.Bytes())
	{%- else -%} ci.Scan(c.OID(), pgtype.BinaryFormatCode, c.Bytes(), &dst.{%s strcase.ToCamel(attr.Name) %}) {%- endif -%}; err != nil {
		logs.ErrorLog(err, "{%s typeName %}.{%s strcase.ToCamel(attr.Name) %}")
		return err
	}
	{%- endfor -%}
	{%- endif -%}

	return nil
}

// Scan implement sql.Scanner interface
func (dst *{%s typeName %}) Scan(src any) error {
	switch src := src.(type) {
	case nil:
		*dst = {%s typeName %}{}
		return nil
	case string:
		return dst.DecodeText(nil, gotools.StringToBytes(src))
	case []byte:
		return dst.DecodeText(nil, src)
	default:
		return fmt.Errorf("cannot scan %T", src)
	}
}
{%- endif -%}
{%- endfunc -%}
end CreateTypeInterface

{%- func (c *Creator) CreateTableConstructor(cName, name string) -%}
// New{%s cName %} create new instance of table {%s cName %}
func (d *Database) New{%s cName %}(ctx context.Context) (*{%s cName %}, error) {
	const name = "{%s name %}"
	table, ok := d.Tables[name]
    if !ok {
		var err error
		table, err = New{%s cName %}FromConn(ctx, d.PsqlConn())
		if err != nil {
			return nil, err
		}
		d.Tables[name] = table
    }

    return &{%s cName %}{
		Table: table.(*psql.Table),
    }, nil
}
{% endfunc %}